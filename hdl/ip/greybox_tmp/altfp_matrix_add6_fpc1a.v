//**********************************************
//***                                        ***
//*** Generated by Floating Point Compiler   ***
//***                                        ***
//*** Copyright Altera Corporation 2010      ***
//***                                        ***
//***                                        ***
//*** Version 10R2 - December 1, 2010        ***
//***                                        ***
//***                                        ***
//**********************************************

`timescale 1 ps / 1 ps

module altfp_matrix_add6_fpc1a (
      sysclk,
      reset,
      enable,
      startin,
      one,
      two,
      three,
      four,
      five,
      six,
      startout,
      result
);

input sysclk;
input reset;
input enable;
input startin;
input [32 : 1] one;
input [32 : 1] two;
input [32 : 1] three;
input [32 : 1] four;
input [32 : 1] five;
input [32 : 1] six;

output startout;
output [32 : 1] result;
wire [32 : 1] synth0000;
wire [32 : 1] synth0001;
wire [32 : 1] synth0002;
wire [32 : 1] synth0003;
wire [32 : 1] synth0004;
wire [32 : 1] synth0005;
wire [32 : 1] synth0006;
wire [49 : 1] synth0007;
wire [49 : 1] synth0008;
wire [49 : 1] synth0009;
wire [49 : 1] synth0010;
wire [49 : 1] synth0011;
wire [49 : 1] synth0012;
wire [49 : 1] synth0013;
wire [49 : 1] synth0014;
wire [49 : 1] synth0015;
wire [49 : 1] synth0016;
wire [49 : 1] synth0017;
wire [32 : 1] synth0018;
wire [49 : 1] synth0019;

reg [24 : 1] startff;

integer k;
  always @ (posedge sysclk or posedge reset)
  begin
    if (reset == 1'b1) begin
        startff <= 24'b0;
    end else begin
      if (enable == 1'b1) begin
        startff[1] <= startin;
        for (k=2; k <= 24; k = k + 1) begin
          startff[k] <= startff[k-1];
        end
      end
    end
  end

  assign synth0000 = one;
  assign synth0001 = two;
  assign synth0002 = three;
  assign synth0003 = four;
  assign synth0004 = five;
  assign synth0005 = six;

  assign result = synth0018;

  hcc_alufp1x # (.mantissa(36),.shiftspeed(1),.outputpipe(1))
  cmp0 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .addsub(1'b 0),
            .aa(synth0016[46 : 1]),
            .aasat(synth0016[47]),.aazip(synth0016[48]),.aanan(synth0016[49]),
            .bb(synth0017[46 : 1]),
            .bbsat(synth0017[47]),.bbzip(synth0017[48]),.bbnan(synth0017[49]),
            .cc(synth0007[46 : 1]),
            .ccsat(synth0007[47]),.cczip(synth0007[48]),.ccnan(synth0007[49]));

  hcc_alufp1x # (.mantissa(36),.shiftspeed(1),.outputpipe(1))
  cmp1 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .addsub(1'b 0),
            .aa(synth0014[46 : 1]),
            .aasat(synth0014[47]),.aazip(synth0014[48]),.aanan(synth0014[49]),
            .bb(synth0015[46 : 1]),
            .bbsat(synth0015[47]),.bbzip(synth0015[48]),.bbnan(synth0015[49]),
            .cc(synth0008[46 : 1]),
            .ccsat(synth0008[47]),.cczip(synth0008[48]),.ccnan(synth0008[49]));

  hcc_alufp1x # (.mantissa(36),.shiftspeed(1),.outputpipe(1))
  cmp2 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .addsub(1'b 0),
            .aa(synth0012[46 : 1]),
            .aasat(synth0012[47]),.aazip(synth0012[48]),.aanan(synth0012[49]),
            .bb(synth0013[46 : 1]),
            .bbsat(synth0013[47]),.bbzip(synth0013[48]),.bbnan(synth0013[49]),
            .cc(synth0009[46 : 1]),
            .ccsat(synth0009[47]),.cczip(synth0009[48]),.ccnan(synth0009[49]));

  hcc_alufp1x # (.mantissa(36),.shiftspeed(1),.outputpipe(1))
  cmp3 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .addsub(1'b 0),
            .aa(synth0009[46 : 1]),
            .aasat(synth0009[47]),.aazip(synth0009[48]),.aanan(synth0009[49]),
            .bb(synth0008[46 : 1]),
            .bbsat(synth0008[47]),.bbzip(synth0008[48]),.bbnan(synth0008[49]),
            .cc(synth0010[46 : 1]),
            .ccsat(synth0010[47]),.cczip(synth0010[48]),.ccnan(synth0010[49]));

  hcc_alufp1x # (.mantissa(36),.shiftspeed(1),.outputpipe(1))
  cmp4 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .addsub(1'b 0),
            .aa(synth0010[46 : 1]),
            .aasat(synth0010[47]),.aazip(synth0010[48]),.aanan(synth0010[49]),
            .bb(synth0019[46 : 1]),
            .bbsat(synth0019[47]),.bbzip(synth0019[48]),.bbnan(synth0019[49]),
            .cc(synth0011[46 : 1]),
            .ccsat(synth0011[47]),.cczip(synth0011[48]),.ccnan(synth0011[49]));

  hcc_castftox # (
.target(0),.roundconvert(0),.mantissa(36),.outputpipe(1))
  cmp5 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .aa(synth0000[32 : 1]),
            .cc(synth0012[46 : 1]),
            .ccsat(synth0012[47]),.cczip(synth0012[48]),.ccnan(synth0012[49]));

  hcc_castftox # (
.target(0),.roundconvert(0),.mantissa(36),.outputpipe(1))
  cmp6 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .aa(synth0001[32 : 1]),
            .cc(synth0013[46 : 1]),
            .ccsat(synth0013[47]),.cczip(synth0013[48]),.ccnan(synth0013[49]));

  hcc_castftox # (
.target(0),.roundconvert(0),.mantissa(36),.outputpipe(1))
  cmp7 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .aa(synth0002[32 : 1]),
            .cc(synth0014[46 : 1]),
            .ccsat(synth0014[47]),.cczip(synth0014[48]),.ccnan(synth0014[49]));

  hcc_castftox # (
.target(0),.roundconvert(0),.mantissa(36),.outputpipe(1))
  cmp8 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .aa(synth0003[32 : 1]),
            .cc(synth0015[46 : 1]),
            .ccsat(synth0015[47]),.cczip(synth0015[48]),.ccnan(synth0015[49]));

  hcc_castftox # (
.target(0),.roundconvert(0),.mantissa(36),.outputpipe(1))
  cmp9 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .aa(synth0004[32 : 1]),
            .cc(synth0016[46 : 1]),
            .ccsat(synth0016[47]),.cczip(synth0016[48]),.ccnan(synth0016[49]));

  hcc_castftox # (
.target(0),.roundconvert(0),.mantissa(36),.outputpipe(1))
  cmp10 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .aa(synth0005[32 : 1]),
            .cc(synth0017[46 : 1]),
            .ccsat(synth0017[47]),.cczip(synth0017[48]),.ccnan(synth0017[49]));

  hcc_castxtof # (.mantissa(36),.normspeed(2))
  cmp11 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .aa(synth0011[46 : 1]),
            .aasat(synth0011[47]),.aazip(synth0011[48]),.aanan(synth0011[49]),
            .cc(synth0018[32 : 1]));

  hcc_delay # (.width(49),.delay(5),.synthesize(1))
  cmp12 (.sysclk(sysclk),.reset(reset),.enable(enable),
            .aa(synth0007[49 : 1]),
            .cc(synth0019[49 : 1]));

  assign startout = startff[24];

endmodule

