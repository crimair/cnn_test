// fpga_mem_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2015.07.03.12:55:43

`timescale 1 ps / 1 ps
module fpga_mem_mm_interconnect_0 (
		input  wire         clock_bridge_1_out_clk_clk,                                      //                                    clock_bridge_1_out_clk.clk
		input  wire         mem_if_ddr3_emif_0_afi_half_clk_clk,                             //                           mem_if_ddr3_emif_0_afi_half_clk.clk
		input  wire         mem_if_ddr3_emif_0_mp_cmd_reset_n_0_reset_bridge_in_reset_reset, // mem_if_ddr3_emif_0_mp_cmd_reset_n_0_reset_bridge_in_reset.reset
		input  wire         mm_bridge_10_reset_reset_bridge_in_reset_reset,                  //                  mm_bridge_10_reset_reset_bridge_in_reset.reset
		input  wire         mm_bridge_11_reset_reset_bridge_in_reset_reset,                  //                  mm_bridge_11_reset_reset_bridge_in_reset.reset
		input  wire [25:0]  mm_bridge_0_m0_address,                                          //                                            mm_bridge_0_m0.address
		output wire         mm_bridge_0_m0_waitrequest,                                      //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_0_m0_burstcount,                                       //                                                          .burstcount
		input  wire [15:0]  mm_bridge_0_m0_byteenable,                                       //                                                          .byteenable
		input  wire         mm_bridge_0_m0_read,                                             //                                                          .read
		output wire [127:0] mm_bridge_0_m0_readdata,                                         //                                                          .readdata
		output wire         mm_bridge_0_m0_readdatavalid,                                    //                                                          .readdatavalid
		input  wire         mm_bridge_0_m0_write,                                            //                                                          .write
		input  wire [127:0] mm_bridge_0_m0_writedata,                                        //                                                          .writedata
		input  wire         mm_bridge_0_m0_debugaccess,                                      //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_1_m0_address,                                          //                                            mm_bridge_1_m0.address
		output wire         mm_bridge_1_m0_waitrequest,                                      //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_1_m0_burstcount,                                       //                                                          .burstcount
		input  wire [15:0]  mm_bridge_1_m0_byteenable,                                       //                                                          .byteenable
		input  wire         mm_bridge_1_m0_read,                                             //                                                          .read
		output wire [127:0] mm_bridge_1_m0_readdata,                                         //                                                          .readdata
		output wire         mm_bridge_1_m0_readdatavalid,                                    //                                                          .readdatavalid
		input  wire         mm_bridge_1_m0_write,                                            //                                                          .write
		input  wire [127:0] mm_bridge_1_m0_writedata,                                        //                                                          .writedata
		input  wire         mm_bridge_1_m0_debugaccess,                                      //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_10_m0_address,                                         //                                           mm_bridge_10_m0.address
		output wire         mm_bridge_10_m0_waitrequest,                                     //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_10_m0_burstcount,                                      //                                                          .burstcount
		input  wire [15:0]  mm_bridge_10_m0_byteenable,                                      //                                                          .byteenable
		input  wire         mm_bridge_10_m0_read,                                            //                                                          .read
		output wire [127:0] mm_bridge_10_m0_readdata,                                        //                                                          .readdata
		output wire         mm_bridge_10_m0_readdatavalid,                                   //                                                          .readdatavalid
		input  wire         mm_bridge_10_m0_write,                                           //                                                          .write
		input  wire [127:0] mm_bridge_10_m0_writedata,                                       //                                                          .writedata
		input  wire         mm_bridge_10_m0_debugaccess,                                     //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_11_m0_address,                                         //                                           mm_bridge_11_m0.address
		output wire         mm_bridge_11_m0_waitrequest,                                     //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_11_m0_burstcount,                                      //                                                          .burstcount
		input  wire [15:0]  mm_bridge_11_m0_byteenable,                                      //                                                          .byteenable
		input  wire         mm_bridge_11_m0_read,                                            //                                                          .read
		output wire [127:0] mm_bridge_11_m0_readdata,                                        //                                                          .readdata
		output wire         mm_bridge_11_m0_readdatavalid,                                   //                                                          .readdatavalid
		input  wire         mm_bridge_11_m0_write,                                           //                                                          .write
		input  wire [127:0] mm_bridge_11_m0_writedata,                                       //                                                          .writedata
		input  wire         mm_bridge_11_m0_debugaccess,                                     //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_2_m0_address,                                          //                                            mm_bridge_2_m0.address
		output wire         mm_bridge_2_m0_waitrequest,                                      //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_2_m0_burstcount,                                       //                                                          .burstcount
		input  wire [15:0]  mm_bridge_2_m0_byteenable,                                       //                                                          .byteenable
		input  wire         mm_bridge_2_m0_read,                                             //                                                          .read
		output wire [127:0] mm_bridge_2_m0_readdata,                                         //                                                          .readdata
		output wire         mm_bridge_2_m0_readdatavalid,                                    //                                                          .readdatavalid
		input  wire         mm_bridge_2_m0_write,                                            //                                                          .write
		input  wire [127:0] mm_bridge_2_m0_writedata,                                        //                                                          .writedata
		input  wire         mm_bridge_2_m0_debugaccess,                                      //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_3_m0_address,                                          //                                            mm_bridge_3_m0.address
		output wire         mm_bridge_3_m0_waitrequest,                                      //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_3_m0_burstcount,                                       //                                                          .burstcount
		input  wire [15:0]  mm_bridge_3_m0_byteenable,                                       //                                                          .byteenable
		input  wire         mm_bridge_3_m0_read,                                             //                                                          .read
		output wire [127:0] mm_bridge_3_m0_readdata,                                         //                                                          .readdata
		output wire         mm_bridge_3_m0_readdatavalid,                                    //                                                          .readdatavalid
		input  wire         mm_bridge_3_m0_write,                                            //                                                          .write
		input  wire [127:0] mm_bridge_3_m0_writedata,                                        //                                                          .writedata
		input  wire         mm_bridge_3_m0_debugaccess,                                      //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_4_m0_address,                                          //                                            mm_bridge_4_m0.address
		output wire         mm_bridge_4_m0_waitrequest,                                      //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_4_m0_burstcount,                                       //                                                          .burstcount
		input  wire [15:0]  mm_bridge_4_m0_byteenable,                                       //                                                          .byteenable
		input  wire         mm_bridge_4_m0_read,                                             //                                                          .read
		output wire [127:0] mm_bridge_4_m0_readdata,                                         //                                                          .readdata
		output wire         mm_bridge_4_m0_readdatavalid,                                    //                                                          .readdatavalid
		input  wire         mm_bridge_4_m0_write,                                            //                                                          .write
		input  wire [127:0] mm_bridge_4_m0_writedata,                                        //                                                          .writedata
		input  wire         mm_bridge_4_m0_debugaccess,                                      //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_5_m0_address,                                          //                                            mm_bridge_5_m0.address
		output wire         mm_bridge_5_m0_waitrequest,                                      //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_5_m0_burstcount,                                       //                                                          .burstcount
		input  wire [15:0]  mm_bridge_5_m0_byteenable,                                       //                                                          .byteenable
		input  wire         mm_bridge_5_m0_read,                                             //                                                          .read
		output wire [127:0] mm_bridge_5_m0_readdata,                                         //                                                          .readdata
		output wire         mm_bridge_5_m0_readdatavalid,                                    //                                                          .readdatavalid
		input  wire         mm_bridge_5_m0_write,                                            //                                                          .write
		input  wire [127:0] mm_bridge_5_m0_writedata,                                        //                                                          .writedata
		input  wire         mm_bridge_5_m0_debugaccess,                                      //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_6_m0_address,                                          //                                            mm_bridge_6_m0.address
		output wire         mm_bridge_6_m0_waitrequest,                                      //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_6_m0_burstcount,                                       //                                                          .burstcount
		input  wire [15:0]  mm_bridge_6_m0_byteenable,                                       //                                                          .byteenable
		input  wire         mm_bridge_6_m0_read,                                             //                                                          .read
		output wire [127:0] mm_bridge_6_m0_readdata,                                         //                                                          .readdata
		output wire         mm_bridge_6_m0_readdatavalid,                                    //                                                          .readdatavalid
		input  wire         mm_bridge_6_m0_write,                                            //                                                          .write
		input  wire [127:0] mm_bridge_6_m0_writedata,                                        //                                                          .writedata
		input  wire         mm_bridge_6_m0_debugaccess,                                      //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_7_m0_address,                                          //                                            mm_bridge_7_m0.address
		output wire         mm_bridge_7_m0_waitrequest,                                      //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_7_m0_burstcount,                                       //                                                          .burstcount
		input  wire [15:0]  mm_bridge_7_m0_byteenable,                                       //                                                          .byteenable
		input  wire         mm_bridge_7_m0_read,                                             //                                                          .read
		output wire [127:0] mm_bridge_7_m0_readdata,                                         //                                                          .readdata
		output wire         mm_bridge_7_m0_readdatavalid,                                    //                                                          .readdatavalid
		input  wire         mm_bridge_7_m0_write,                                            //                                                          .write
		input  wire [127:0] mm_bridge_7_m0_writedata,                                        //                                                          .writedata
		input  wire         mm_bridge_7_m0_debugaccess,                                      //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_8_m0_address,                                          //                                            mm_bridge_8_m0.address
		output wire         mm_bridge_8_m0_waitrequest,                                      //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_8_m0_burstcount,                                       //                                                          .burstcount
		input  wire [15:0]  mm_bridge_8_m0_byteenable,                                       //                                                          .byteenable
		input  wire         mm_bridge_8_m0_read,                                             //                                                          .read
		output wire [127:0] mm_bridge_8_m0_readdata,                                         //                                                          .readdata
		output wire         mm_bridge_8_m0_readdatavalid,                                    //                                                          .readdatavalid
		input  wire         mm_bridge_8_m0_write,                                            //                                                          .write
		input  wire [127:0] mm_bridge_8_m0_writedata,                                        //                                                          .writedata
		input  wire         mm_bridge_8_m0_debugaccess,                                      //                                                          .debugaccess
		input  wire [25:0]  mm_bridge_9_m0_address,                                          //                                            mm_bridge_9_m0.address
		output wire         mm_bridge_9_m0_waitrequest,                                      //                                                          .waitrequest
		input  wire [5:0]   mm_bridge_9_m0_burstcount,                                       //                                                          .burstcount
		input  wire [15:0]  mm_bridge_9_m0_byteenable,                                       //                                                          .byteenable
		input  wire         mm_bridge_9_m0_read,                                             //                                                          .read
		output wire [127:0] mm_bridge_9_m0_readdata,                                         //                                                          .readdata
		output wire         mm_bridge_9_m0_readdatavalid,                                    //                                                          .readdatavalid
		input  wire         mm_bridge_9_m0_write,                                            //                                                          .write
		input  wire [127:0] mm_bridge_9_m0_writedata,                                        //                                                          .writedata
		input  wire         mm_bridge_9_m0_debugaccess,                                      //                                                          .debugaccess
		output wire [25:0]  mem_if_ddr3_emif_0_avl_0_address,                                //                                  mem_if_ddr3_emif_0_avl_0.address
		output wire         mem_if_ddr3_emif_0_avl_0_write,                                  //                                                          .write
		output wire         mem_if_ddr3_emif_0_avl_0_read,                                   //                                                          .read
		input  wire [127:0] mem_if_ddr3_emif_0_avl_0_readdata,                               //                                                          .readdata
		output wire [127:0] mem_if_ddr3_emif_0_avl_0_writedata,                              //                                                          .writedata
		output wire         mem_if_ddr3_emif_0_avl_0_beginbursttransfer,                     //                                                          .beginbursttransfer
		output wire [5:0]   mem_if_ddr3_emif_0_avl_0_burstcount,                             //                                                          .burstcount
		output wire [15:0]  mem_if_ddr3_emif_0_avl_0_byteenable,                             //                                                          .byteenable
		input  wire         mem_if_ddr3_emif_0_avl_0_readdatavalid,                          //                                                          .readdatavalid
		input  wire         mem_if_ddr3_emif_0_avl_0_waitrequest                             //                                                          .waitrequest
	);

	wire          mm_bridge_10_m0_translator_avalon_universal_master_0_waitrequest;                              // mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_10_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_10_m0_translator_avalon_universal_master_0_burstcount;                               // mm_bridge_10_m0_translator:uav_burstcount -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_10_m0_translator_avalon_universal_master_0_writedata;                                // mm_bridge_10_m0_translator:uav_writedata -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_10_m0_translator_avalon_universal_master_0_address;                                  // mm_bridge_10_m0_translator:uav_address -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_10_m0_translator_avalon_universal_master_0_lock;                                     // mm_bridge_10_m0_translator:uav_lock -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_10_m0_translator_avalon_universal_master_0_write;                                    // mm_bridge_10_m0_translator:uav_write -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_10_m0_translator_avalon_universal_master_0_read;                                     // mm_bridge_10_m0_translator:uav_read -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_10_m0_translator_avalon_universal_master_0_readdata;                                 // mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_10_m0_translator:uav_readdata
	wire          mm_bridge_10_m0_translator_avalon_universal_master_0_debugaccess;                              // mm_bridge_10_m0_translator:uav_debugaccess -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_10_m0_translator_avalon_universal_master_0_byteenable;                               // mm_bridge_10_m0_translator:uav_byteenable -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_10_m0_translator_avalon_universal_master_0_readdatavalid;                            // mm_bridge_10_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_10_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_src_endofpacket;                                                                  // rsp_xbar_mux:src_endofpacket -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                        // rsp_xbar_mux:src_valid -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                                // rsp_xbar_mux:src_startofpacket -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_src_data;                                                                         // rsp_xbar_mux:src_data -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_src_channel;                                                                      // rsp_xbar_mux:src_channel -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_src_ready;                                                                        // mm_bridge_10_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux:src_ready
	wire          mm_bridge_11_m0_translator_avalon_universal_master_0_waitrequest;                              // mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_11_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_11_m0_translator_avalon_universal_master_0_burstcount;                               // mm_bridge_11_m0_translator:uav_burstcount -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_11_m0_translator_avalon_universal_master_0_writedata;                                // mm_bridge_11_m0_translator:uav_writedata -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_11_m0_translator_avalon_universal_master_0_address;                                  // mm_bridge_11_m0_translator:uav_address -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_11_m0_translator_avalon_universal_master_0_lock;                                     // mm_bridge_11_m0_translator:uav_lock -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_11_m0_translator_avalon_universal_master_0_write;                                    // mm_bridge_11_m0_translator:uav_write -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_11_m0_translator_avalon_universal_master_0_read;                                     // mm_bridge_11_m0_translator:uav_read -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_11_m0_translator_avalon_universal_master_0_readdata;                                 // mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_11_m0_translator:uav_readdata
	wire          mm_bridge_11_m0_translator_avalon_universal_master_0_debugaccess;                              // mm_bridge_11_m0_translator:uav_debugaccess -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_11_m0_translator_avalon_universal_master_0_byteenable;                               // mm_bridge_11_m0_translator:uav_byteenable -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_11_m0_translator_avalon_universal_master_0_readdatavalid;                            // mm_bridge_11_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_11_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_001_src_endofpacket;                                                              // rsp_xbar_mux_001:src_endofpacket -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                    // rsp_xbar_mux_001:src_valid -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                            // rsp_xbar_mux_001:src_startofpacket -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_001_src_data;                                                                     // rsp_xbar_mux_001:src_data -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_001_src_channel;                                                                  // rsp_xbar_mux_001:src_channel -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                    // mm_bridge_11_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_001:src_ready
	wire          mm_bridge_9_m0_translator_avalon_universal_master_0_waitrequest;                               // mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_9_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_9_m0_translator_avalon_universal_master_0_burstcount;                                // mm_bridge_9_m0_translator:uav_burstcount -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_9_m0_translator_avalon_universal_master_0_writedata;                                 // mm_bridge_9_m0_translator:uav_writedata -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_9_m0_translator_avalon_universal_master_0_address;                                   // mm_bridge_9_m0_translator:uav_address -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_9_m0_translator_avalon_universal_master_0_lock;                                      // mm_bridge_9_m0_translator:uav_lock -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_9_m0_translator_avalon_universal_master_0_write;                                     // mm_bridge_9_m0_translator:uav_write -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_9_m0_translator_avalon_universal_master_0_read;                                      // mm_bridge_9_m0_translator:uav_read -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_9_m0_translator_avalon_universal_master_0_readdata;                                  // mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_9_m0_translator:uav_readdata
	wire          mm_bridge_9_m0_translator_avalon_universal_master_0_debugaccess;                               // mm_bridge_9_m0_translator:uav_debugaccess -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_9_m0_translator_avalon_universal_master_0_byteenable;                                // mm_bridge_9_m0_translator:uav_byteenable -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_9_m0_translator_avalon_universal_master_0_readdatavalid;                             // mm_bridge_9_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_9_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_002_src_endofpacket;                                                              // rsp_xbar_mux_002:src_endofpacket -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_002_src_valid;                                                                    // rsp_xbar_mux_002:src_valid -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_002_src_startofpacket;                                                            // rsp_xbar_mux_002:src_startofpacket -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_002_src_data;                                                                     // rsp_xbar_mux_002:src_data -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_002_src_channel;                                                                  // rsp_xbar_mux_002:src_channel -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_002_src_ready;                                                                    // mm_bridge_9_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_002:src_ready
	wire          mm_bridge_8_m0_translator_avalon_universal_master_0_waitrequest;                               // mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_8_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_8_m0_translator_avalon_universal_master_0_burstcount;                                // mm_bridge_8_m0_translator:uav_burstcount -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_8_m0_translator_avalon_universal_master_0_writedata;                                 // mm_bridge_8_m0_translator:uav_writedata -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_8_m0_translator_avalon_universal_master_0_address;                                   // mm_bridge_8_m0_translator:uav_address -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_8_m0_translator_avalon_universal_master_0_lock;                                      // mm_bridge_8_m0_translator:uav_lock -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_8_m0_translator_avalon_universal_master_0_write;                                     // mm_bridge_8_m0_translator:uav_write -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_8_m0_translator_avalon_universal_master_0_read;                                      // mm_bridge_8_m0_translator:uav_read -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_8_m0_translator_avalon_universal_master_0_readdata;                                  // mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_8_m0_translator:uav_readdata
	wire          mm_bridge_8_m0_translator_avalon_universal_master_0_debugaccess;                               // mm_bridge_8_m0_translator:uav_debugaccess -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_8_m0_translator_avalon_universal_master_0_byteenable;                                // mm_bridge_8_m0_translator:uav_byteenable -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_8_m0_translator_avalon_universal_master_0_readdatavalid;                             // mm_bridge_8_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_8_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_003_src_endofpacket;                                                              // rsp_xbar_mux_003:src_endofpacket -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_003_src_valid;                                                                    // rsp_xbar_mux_003:src_valid -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_003_src_startofpacket;                                                            // rsp_xbar_mux_003:src_startofpacket -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_003_src_data;                                                                     // rsp_xbar_mux_003:src_data -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_003_src_channel;                                                                  // rsp_xbar_mux_003:src_channel -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_003_src_ready;                                                                    // mm_bridge_8_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_003:src_ready
	wire          mm_bridge_6_m0_translator_avalon_universal_master_0_waitrequest;                               // mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_6_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_6_m0_translator_avalon_universal_master_0_burstcount;                                // mm_bridge_6_m0_translator:uav_burstcount -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_6_m0_translator_avalon_universal_master_0_writedata;                                 // mm_bridge_6_m0_translator:uav_writedata -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_6_m0_translator_avalon_universal_master_0_address;                                   // mm_bridge_6_m0_translator:uav_address -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_6_m0_translator_avalon_universal_master_0_lock;                                      // mm_bridge_6_m0_translator:uav_lock -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_6_m0_translator_avalon_universal_master_0_write;                                     // mm_bridge_6_m0_translator:uav_write -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_6_m0_translator_avalon_universal_master_0_read;                                      // mm_bridge_6_m0_translator:uav_read -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_6_m0_translator_avalon_universal_master_0_readdata;                                  // mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_6_m0_translator:uav_readdata
	wire          mm_bridge_6_m0_translator_avalon_universal_master_0_debugaccess;                               // mm_bridge_6_m0_translator:uav_debugaccess -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_6_m0_translator_avalon_universal_master_0_byteenable;                                // mm_bridge_6_m0_translator:uav_byteenable -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_6_m0_translator_avalon_universal_master_0_readdatavalid;                             // mm_bridge_6_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_6_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_004_src_endofpacket;                                                              // rsp_xbar_mux_004:src_endofpacket -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_004_src_valid;                                                                    // rsp_xbar_mux_004:src_valid -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_004_src_startofpacket;                                                            // rsp_xbar_mux_004:src_startofpacket -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_004_src_data;                                                                     // rsp_xbar_mux_004:src_data -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_004_src_channel;                                                                  // rsp_xbar_mux_004:src_channel -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_004_src_ready;                                                                    // mm_bridge_6_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_004:src_ready
	wire          mm_bridge_7_m0_translator_avalon_universal_master_0_waitrequest;                               // mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_7_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_7_m0_translator_avalon_universal_master_0_burstcount;                                // mm_bridge_7_m0_translator:uav_burstcount -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_7_m0_translator_avalon_universal_master_0_writedata;                                 // mm_bridge_7_m0_translator:uav_writedata -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_7_m0_translator_avalon_universal_master_0_address;                                   // mm_bridge_7_m0_translator:uav_address -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_7_m0_translator_avalon_universal_master_0_lock;                                      // mm_bridge_7_m0_translator:uav_lock -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_7_m0_translator_avalon_universal_master_0_write;                                     // mm_bridge_7_m0_translator:uav_write -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_7_m0_translator_avalon_universal_master_0_read;                                      // mm_bridge_7_m0_translator:uav_read -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_7_m0_translator_avalon_universal_master_0_readdata;                                  // mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_7_m0_translator:uav_readdata
	wire          mm_bridge_7_m0_translator_avalon_universal_master_0_debugaccess;                               // mm_bridge_7_m0_translator:uav_debugaccess -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_7_m0_translator_avalon_universal_master_0_byteenable;                                // mm_bridge_7_m0_translator:uav_byteenable -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_7_m0_translator_avalon_universal_master_0_readdatavalid;                             // mm_bridge_7_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_7_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_005_src_endofpacket;                                                              // rsp_xbar_mux_005:src_endofpacket -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_005_src_valid;                                                                    // rsp_xbar_mux_005:src_valid -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_005_src_startofpacket;                                                            // rsp_xbar_mux_005:src_startofpacket -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_005_src_data;                                                                     // rsp_xbar_mux_005:src_data -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_005_src_channel;                                                                  // rsp_xbar_mux_005:src_channel -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_005_src_ready;                                                                    // mm_bridge_7_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_005:src_ready
	wire          mm_bridge_5_m0_translator_avalon_universal_master_0_waitrequest;                               // mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_5_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_5_m0_translator_avalon_universal_master_0_burstcount;                                // mm_bridge_5_m0_translator:uav_burstcount -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_5_m0_translator_avalon_universal_master_0_writedata;                                 // mm_bridge_5_m0_translator:uav_writedata -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_5_m0_translator_avalon_universal_master_0_address;                                   // mm_bridge_5_m0_translator:uav_address -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_5_m0_translator_avalon_universal_master_0_lock;                                      // mm_bridge_5_m0_translator:uav_lock -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_5_m0_translator_avalon_universal_master_0_write;                                     // mm_bridge_5_m0_translator:uav_write -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_5_m0_translator_avalon_universal_master_0_read;                                      // mm_bridge_5_m0_translator:uav_read -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_5_m0_translator_avalon_universal_master_0_readdata;                                  // mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_5_m0_translator:uav_readdata
	wire          mm_bridge_5_m0_translator_avalon_universal_master_0_debugaccess;                               // mm_bridge_5_m0_translator:uav_debugaccess -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_5_m0_translator_avalon_universal_master_0_byteenable;                                // mm_bridge_5_m0_translator:uav_byteenable -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_5_m0_translator_avalon_universal_master_0_readdatavalid;                             // mm_bridge_5_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_5_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_006_src_endofpacket;                                                              // rsp_xbar_mux_006:src_endofpacket -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_006_src_valid;                                                                    // rsp_xbar_mux_006:src_valid -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_006_src_startofpacket;                                                            // rsp_xbar_mux_006:src_startofpacket -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_006_src_data;                                                                     // rsp_xbar_mux_006:src_data -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_006_src_channel;                                                                  // rsp_xbar_mux_006:src_channel -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_006_src_ready;                                                                    // mm_bridge_5_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_006:src_ready
	wire          mm_bridge_4_m0_translator_avalon_universal_master_0_waitrequest;                               // mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_4_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_4_m0_translator_avalon_universal_master_0_burstcount;                                // mm_bridge_4_m0_translator:uav_burstcount -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_4_m0_translator_avalon_universal_master_0_writedata;                                 // mm_bridge_4_m0_translator:uav_writedata -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_4_m0_translator_avalon_universal_master_0_address;                                   // mm_bridge_4_m0_translator:uav_address -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_4_m0_translator_avalon_universal_master_0_lock;                                      // mm_bridge_4_m0_translator:uav_lock -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_4_m0_translator_avalon_universal_master_0_write;                                     // mm_bridge_4_m0_translator:uav_write -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_4_m0_translator_avalon_universal_master_0_read;                                      // mm_bridge_4_m0_translator:uav_read -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_4_m0_translator_avalon_universal_master_0_readdata;                                  // mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_4_m0_translator:uav_readdata
	wire          mm_bridge_4_m0_translator_avalon_universal_master_0_debugaccess;                               // mm_bridge_4_m0_translator:uav_debugaccess -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_4_m0_translator_avalon_universal_master_0_byteenable;                                // mm_bridge_4_m0_translator:uav_byteenable -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_4_m0_translator_avalon_universal_master_0_readdatavalid;                             // mm_bridge_4_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_4_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_007_src_endofpacket;                                                              // rsp_xbar_mux_007:src_endofpacket -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_007_src_valid;                                                                    // rsp_xbar_mux_007:src_valid -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_007_src_startofpacket;                                                            // rsp_xbar_mux_007:src_startofpacket -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_007_src_data;                                                                     // rsp_xbar_mux_007:src_data -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_007_src_channel;                                                                  // rsp_xbar_mux_007:src_channel -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_007_src_ready;                                                                    // mm_bridge_4_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_007:src_ready
	wire          mm_bridge_3_m0_translator_avalon_universal_master_0_waitrequest;                               // mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_3_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_3_m0_translator_avalon_universal_master_0_burstcount;                                // mm_bridge_3_m0_translator:uav_burstcount -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_3_m0_translator_avalon_universal_master_0_writedata;                                 // mm_bridge_3_m0_translator:uav_writedata -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_3_m0_translator_avalon_universal_master_0_address;                                   // mm_bridge_3_m0_translator:uav_address -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_3_m0_translator_avalon_universal_master_0_lock;                                      // mm_bridge_3_m0_translator:uav_lock -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_3_m0_translator_avalon_universal_master_0_write;                                     // mm_bridge_3_m0_translator:uav_write -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_3_m0_translator_avalon_universal_master_0_read;                                      // mm_bridge_3_m0_translator:uav_read -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_3_m0_translator_avalon_universal_master_0_readdata;                                  // mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_3_m0_translator:uav_readdata
	wire          mm_bridge_3_m0_translator_avalon_universal_master_0_debugaccess;                               // mm_bridge_3_m0_translator:uav_debugaccess -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_3_m0_translator_avalon_universal_master_0_byteenable;                                // mm_bridge_3_m0_translator:uav_byteenable -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_3_m0_translator_avalon_universal_master_0_readdatavalid;                             // mm_bridge_3_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_3_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_008_src_endofpacket;                                                              // rsp_xbar_mux_008:src_endofpacket -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_008_src_valid;                                                                    // rsp_xbar_mux_008:src_valid -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_008_src_startofpacket;                                                            // rsp_xbar_mux_008:src_startofpacket -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_008_src_data;                                                                     // rsp_xbar_mux_008:src_data -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_008_src_channel;                                                                  // rsp_xbar_mux_008:src_channel -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_008_src_ready;                                                                    // mm_bridge_3_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_008:src_ready
	wire          mm_bridge_2_m0_translator_avalon_universal_master_0_waitrequest;                               // mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_2_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_2_m0_translator_avalon_universal_master_0_burstcount;                                // mm_bridge_2_m0_translator:uav_burstcount -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_2_m0_translator_avalon_universal_master_0_writedata;                                 // mm_bridge_2_m0_translator:uav_writedata -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_2_m0_translator_avalon_universal_master_0_address;                                   // mm_bridge_2_m0_translator:uav_address -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_2_m0_translator_avalon_universal_master_0_lock;                                      // mm_bridge_2_m0_translator:uav_lock -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_2_m0_translator_avalon_universal_master_0_write;                                     // mm_bridge_2_m0_translator:uav_write -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_2_m0_translator_avalon_universal_master_0_read;                                      // mm_bridge_2_m0_translator:uav_read -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_2_m0_translator_avalon_universal_master_0_readdata;                                  // mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_2_m0_translator:uav_readdata
	wire          mm_bridge_2_m0_translator_avalon_universal_master_0_debugaccess;                               // mm_bridge_2_m0_translator:uav_debugaccess -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_2_m0_translator_avalon_universal_master_0_byteenable;                                // mm_bridge_2_m0_translator:uav_byteenable -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_2_m0_translator_avalon_universal_master_0_readdatavalid;                             // mm_bridge_2_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_2_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_009_src_endofpacket;                                                              // rsp_xbar_mux_009:src_endofpacket -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_009_src_valid;                                                                    // rsp_xbar_mux_009:src_valid -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_009_src_startofpacket;                                                            // rsp_xbar_mux_009:src_startofpacket -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_009_src_data;                                                                     // rsp_xbar_mux_009:src_data -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_009_src_channel;                                                                  // rsp_xbar_mux_009:src_channel -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_009_src_ready;                                                                    // mm_bridge_2_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_009:src_ready
	wire          mm_bridge_1_m0_translator_avalon_universal_master_0_waitrequest;                               // mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_1_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_1_m0_translator_avalon_universal_master_0_burstcount;                                // mm_bridge_1_m0_translator:uav_burstcount -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_1_m0_translator_avalon_universal_master_0_writedata;                                 // mm_bridge_1_m0_translator:uav_writedata -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_1_m0_translator_avalon_universal_master_0_address;                                   // mm_bridge_1_m0_translator:uav_address -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_1_m0_translator_avalon_universal_master_0_lock;                                      // mm_bridge_1_m0_translator:uav_lock -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_1_m0_translator_avalon_universal_master_0_write;                                     // mm_bridge_1_m0_translator:uav_write -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_1_m0_translator_avalon_universal_master_0_read;                                      // mm_bridge_1_m0_translator:uav_read -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_1_m0_translator_avalon_universal_master_0_readdata;                                  // mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_1_m0_translator:uav_readdata
	wire          mm_bridge_1_m0_translator_avalon_universal_master_0_debugaccess;                               // mm_bridge_1_m0_translator:uav_debugaccess -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_1_m0_translator_avalon_universal_master_0_byteenable;                                // mm_bridge_1_m0_translator:uav_byteenable -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid;                             // mm_bridge_1_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_1_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_010_src_endofpacket;                                                              // rsp_xbar_mux_010:src_endofpacket -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_010_src_valid;                                                                    // rsp_xbar_mux_010:src_valid -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_010_src_startofpacket;                                                            // rsp_xbar_mux_010:src_startofpacket -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_010_src_data;                                                                     // rsp_xbar_mux_010:src_data -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_010_src_channel;                                                                  // rsp_xbar_mux_010:src_channel -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_010_src_ready;                                                                    // mm_bridge_1_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_010:src_ready
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;                               // mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire    [9:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;                                // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [127:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;                                 // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [29:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;                                   // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_address
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_lock;                                      // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_write;                                     // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_write
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_read;                                      // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [127:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;                                  // mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;                               // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [15:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;                                // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;                             // mm_bridge_0_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_011_src_endofpacket;                                                              // rsp_xbar_mux_011:src_endofpacket -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_011_src_valid;                                                                    // rsp_xbar_mux_011:src_valid -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_011_src_startofpacket;                                                            // rsp_xbar_mux_011:src_startofpacket -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [220:0] rsp_xbar_mux_011_src_data;                                                                     // rsp_xbar_mux_011:src_data -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [11:0] rsp_xbar_mux_011_src_channel;                                                                  // rsp_xbar_mux_011:src_channel -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_011_src_ready;                                                                    // mm_bridge_0_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_011:src_ready
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // mem_if_ddr3_emif_0_avl_0_translator:uav_waitrequest -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [9:0] mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_burstcount;              // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_burstcount -> mem_if_ddr3_emif_0_avl_0_translator:uav_burstcount
	wire  [127:0] mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_writedata;               // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_writedata -> mem_if_ddr3_emif_0_avl_0_translator:uav_writedata
	wire   [29:0] mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_address;                 // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_address -> mem_if_ddr3_emif_0_avl_0_translator:uav_address
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_write;                   // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_write -> mem_if_ddr3_emif_0_avl_0_translator:uav_write
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_lock;                    // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_lock -> mem_if_ddr3_emif_0_avl_0_translator:uav_lock
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_read;                    // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_read -> mem_if_ddr3_emif_0_avl_0_translator:uav_read
	wire  [127:0] mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_readdata;                // mem_if_ddr3_emif_0_avl_0_translator:uav_readdata -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // mem_if_ddr3_emif_0_avl_0_translator:uav_readdatavalid -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> mem_if_ddr3_emif_0_avl_0_translator:uav_debugaccess
	wire   [15:0] mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_byteenable;              // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:m0_byteenable -> mem_if_ddr3_emif_0_avl_0_translator:uav_byteenable
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_valid;            // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rf_source_valid -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [221:0] mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_data;             // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rf_source_data -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_ready;            // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [221:0] mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire  [129:0] mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [129:0] mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                  // cmd_xbar_mux:src_endofpacket -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                        // cmd_xbar_mux:src_valid -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                                // cmd_xbar_mux:src_startofpacket -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [220:0] cmd_xbar_mux_src_data;                                                                         // cmd_xbar_mux:src_data -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [11:0] cmd_xbar_mux_src_channel;                                                                      // cmd_xbar_mux:src_channel -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_src_ready;                                                                        // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux:src_ready
	wire          mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                     // mm_bridge_10_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire          mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_valid;                           // mm_bridge_10_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire          mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                   // mm_bridge_10_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [220:0] mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_data;                            // mm_bridge_10_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire          mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_ready;                           // addr_router:sink_ready -> mm_bridge_10_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_src_endofpacket;                                                                   // addr_router:src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          addr_router_src_valid;                                                                         // addr_router:src_valid -> cmd_xbar_demux:sink_valid
	wire          addr_router_src_startofpacket;                                                                 // addr_router:src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [220:0] addr_router_src_data;                                                                          // addr_router:src_data -> cmd_xbar_demux:sink_data
	wire   [11:0] addr_router_src_channel;                                                                       // addr_router:src_channel -> cmd_xbar_demux:sink_channel
	wire          addr_router_src_ready;                                                                         // cmd_xbar_demux:sink_ready -> addr_router:src_ready
	wire          mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                     // mm_bridge_11_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_valid;                           // mm_bridge_11_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_001:sink_valid
	wire          mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                   // mm_bridge_11_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [220:0] mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_data;                            // mm_bridge_11_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_001:sink_data
	wire          mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_ready;                           // addr_router_001:sink_ready -> mm_bridge_11_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_001_src_endofpacket;                                                               // addr_router_001:src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          addr_router_001_src_valid;                                                                     // addr_router_001:src_valid -> cmd_xbar_demux_001:sink_valid
	wire          addr_router_001_src_startofpacket;                                                             // addr_router_001:src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [220:0] addr_router_001_src_data;                                                                      // addr_router_001:src_data -> cmd_xbar_demux_001:sink_data
	wire   [11:0] addr_router_001_src_channel;                                                                   // addr_router_001:src_channel -> cmd_xbar_demux_001:sink_channel
	wire          addr_router_001_src_ready;                                                                     // cmd_xbar_demux_001:sink_ready -> addr_router_001:src_ready
	wire          mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                      // mm_bridge_9_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_002:sink_endofpacket
	wire          mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_valid;                            // mm_bridge_9_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_002:sink_valid
	wire          mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                    // mm_bridge_9_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_002:sink_startofpacket
	wire  [220:0] mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_data;                             // mm_bridge_9_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_002:sink_data
	wire          mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_ready;                            // addr_router_002:sink_ready -> mm_bridge_9_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_002_src_endofpacket;                                                               // addr_router_002:src_endofpacket -> cmd_xbar_demux_002:sink_endofpacket
	wire          addr_router_002_src_valid;                                                                     // addr_router_002:src_valid -> cmd_xbar_demux_002:sink_valid
	wire          addr_router_002_src_startofpacket;                                                             // addr_router_002:src_startofpacket -> cmd_xbar_demux_002:sink_startofpacket
	wire  [220:0] addr_router_002_src_data;                                                                      // addr_router_002:src_data -> cmd_xbar_demux_002:sink_data
	wire   [11:0] addr_router_002_src_channel;                                                                   // addr_router_002:src_channel -> cmd_xbar_demux_002:sink_channel
	wire          addr_router_002_src_ready;                                                                     // cmd_xbar_demux_002:sink_ready -> addr_router_002:src_ready
	wire          mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                      // mm_bridge_8_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_003:sink_endofpacket
	wire          mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_valid;                            // mm_bridge_8_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_003:sink_valid
	wire          mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                    // mm_bridge_8_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_003:sink_startofpacket
	wire  [220:0] mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_data;                             // mm_bridge_8_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_003:sink_data
	wire          mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_ready;                            // addr_router_003:sink_ready -> mm_bridge_8_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_003_src_endofpacket;                                                               // addr_router_003:src_endofpacket -> cmd_xbar_demux_003:sink_endofpacket
	wire          addr_router_003_src_valid;                                                                     // addr_router_003:src_valid -> cmd_xbar_demux_003:sink_valid
	wire          addr_router_003_src_startofpacket;                                                             // addr_router_003:src_startofpacket -> cmd_xbar_demux_003:sink_startofpacket
	wire  [220:0] addr_router_003_src_data;                                                                      // addr_router_003:src_data -> cmd_xbar_demux_003:sink_data
	wire   [11:0] addr_router_003_src_channel;                                                                   // addr_router_003:src_channel -> cmd_xbar_demux_003:sink_channel
	wire          addr_router_003_src_ready;                                                                     // cmd_xbar_demux_003:sink_ready -> addr_router_003:src_ready
	wire          mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                      // mm_bridge_6_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_004:sink_endofpacket
	wire          mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_valid;                            // mm_bridge_6_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_004:sink_valid
	wire          mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                    // mm_bridge_6_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_004:sink_startofpacket
	wire  [220:0] mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_data;                             // mm_bridge_6_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_004:sink_data
	wire          mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_ready;                            // addr_router_004:sink_ready -> mm_bridge_6_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_004_src_endofpacket;                                                               // addr_router_004:src_endofpacket -> cmd_xbar_demux_004:sink_endofpacket
	wire          addr_router_004_src_valid;                                                                     // addr_router_004:src_valid -> cmd_xbar_demux_004:sink_valid
	wire          addr_router_004_src_startofpacket;                                                             // addr_router_004:src_startofpacket -> cmd_xbar_demux_004:sink_startofpacket
	wire  [220:0] addr_router_004_src_data;                                                                      // addr_router_004:src_data -> cmd_xbar_demux_004:sink_data
	wire   [11:0] addr_router_004_src_channel;                                                                   // addr_router_004:src_channel -> cmd_xbar_demux_004:sink_channel
	wire          addr_router_004_src_ready;                                                                     // cmd_xbar_demux_004:sink_ready -> addr_router_004:src_ready
	wire          mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                      // mm_bridge_7_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_005:sink_endofpacket
	wire          mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_valid;                            // mm_bridge_7_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_005:sink_valid
	wire          mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                    // mm_bridge_7_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_005:sink_startofpacket
	wire  [220:0] mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_data;                             // mm_bridge_7_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_005:sink_data
	wire          mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_ready;                            // addr_router_005:sink_ready -> mm_bridge_7_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_005_src_endofpacket;                                                               // addr_router_005:src_endofpacket -> cmd_xbar_demux_005:sink_endofpacket
	wire          addr_router_005_src_valid;                                                                     // addr_router_005:src_valid -> cmd_xbar_demux_005:sink_valid
	wire          addr_router_005_src_startofpacket;                                                             // addr_router_005:src_startofpacket -> cmd_xbar_demux_005:sink_startofpacket
	wire  [220:0] addr_router_005_src_data;                                                                      // addr_router_005:src_data -> cmd_xbar_demux_005:sink_data
	wire   [11:0] addr_router_005_src_channel;                                                                   // addr_router_005:src_channel -> cmd_xbar_demux_005:sink_channel
	wire          addr_router_005_src_ready;                                                                     // cmd_xbar_demux_005:sink_ready -> addr_router_005:src_ready
	wire          mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                      // mm_bridge_5_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_006:sink_endofpacket
	wire          mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_valid;                            // mm_bridge_5_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_006:sink_valid
	wire          mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                    // mm_bridge_5_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_006:sink_startofpacket
	wire  [220:0] mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_data;                             // mm_bridge_5_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_006:sink_data
	wire          mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_ready;                            // addr_router_006:sink_ready -> mm_bridge_5_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_006_src_endofpacket;                                                               // addr_router_006:src_endofpacket -> cmd_xbar_demux_006:sink_endofpacket
	wire          addr_router_006_src_valid;                                                                     // addr_router_006:src_valid -> cmd_xbar_demux_006:sink_valid
	wire          addr_router_006_src_startofpacket;                                                             // addr_router_006:src_startofpacket -> cmd_xbar_demux_006:sink_startofpacket
	wire  [220:0] addr_router_006_src_data;                                                                      // addr_router_006:src_data -> cmd_xbar_demux_006:sink_data
	wire   [11:0] addr_router_006_src_channel;                                                                   // addr_router_006:src_channel -> cmd_xbar_demux_006:sink_channel
	wire          addr_router_006_src_ready;                                                                     // cmd_xbar_demux_006:sink_ready -> addr_router_006:src_ready
	wire          mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                      // mm_bridge_4_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_007:sink_endofpacket
	wire          mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_valid;                            // mm_bridge_4_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_007:sink_valid
	wire          mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                    // mm_bridge_4_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_007:sink_startofpacket
	wire  [220:0] mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_data;                             // mm_bridge_4_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_007:sink_data
	wire          mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_ready;                            // addr_router_007:sink_ready -> mm_bridge_4_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_007_src_endofpacket;                                                               // addr_router_007:src_endofpacket -> cmd_xbar_demux_007:sink_endofpacket
	wire          addr_router_007_src_valid;                                                                     // addr_router_007:src_valid -> cmd_xbar_demux_007:sink_valid
	wire          addr_router_007_src_startofpacket;                                                             // addr_router_007:src_startofpacket -> cmd_xbar_demux_007:sink_startofpacket
	wire  [220:0] addr_router_007_src_data;                                                                      // addr_router_007:src_data -> cmd_xbar_demux_007:sink_data
	wire   [11:0] addr_router_007_src_channel;                                                                   // addr_router_007:src_channel -> cmd_xbar_demux_007:sink_channel
	wire          addr_router_007_src_ready;                                                                     // cmd_xbar_demux_007:sink_ready -> addr_router_007:src_ready
	wire          mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                      // mm_bridge_3_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_008:sink_endofpacket
	wire          mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_valid;                            // mm_bridge_3_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_008:sink_valid
	wire          mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                    // mm_bridge_3_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_008:sink_startofpacket
	wire  [220:0] mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_data;                             // mm_bridge_3_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_008:sink_data
	wire          mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_ready;                            // addr_router_008:sink_ready -> mm_bridge_3_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_008_src_endofpacket;                                                               // addr_router_008:src_endofpacket -> cmd_xbar_demux_008:sink_endofpacket
	wire          addr_router_008_src_valid;                                                                     // addr_router_008:src_valid -> cmd_xbar_demux_008:sink_valid
	wire          addr_router_008_src_startofpacket;                                                             // addr_router_008:src_startofpacket -> cmd_xbar_demux_008:sink_startofpacket
	wire  [220:0] addr_router_008_src_data;                                                                      // addr_router_008:src_data -> cmd_xbar_demux_008:sink_data
	wire   [11:0] addr_router_008_src_channel;                                                                   // addr_router_008:src_channel -> cmd_xbar_demux_008:sink_channel
	wire          addr_router_008_src_ready;                                                                     // cmd_xbar_demux_008:sink_ready -> addr_router_008:src_ready
	wire          mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                      // mm_bridge_2_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_009:sink_endofpacket
	wire          mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_valid;                            // mm_bridge_2_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_009:sink_valid
	wire          mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                    // mm_bridge_2_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_009:sink_startofpacket
	wire  [220:0] mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_data;                             // mm_bridge_2_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_009:sink_data
	wire          mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_ready;                            // addr_router_009:sink_ready -> mm_bridge_2_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_009_src_endofpacket;                                                               // addr_router_009:src_endofpacket -> cmd_xbar_demux_009:sink_endofpacket
	wire          addr_router_009_src_valid;                                                                     // addr_router_009:src_valid -> cmd_xbar_demux_009:sink_valid
	wire          addr_router_009_src_startofpacket;                                                             // addr_router_009:src_startofpacket -> cmd_xbar_demux_009:sink_startofpacket
	wire  [220:0] addr_router_009_src_data;                                                                      // addr_router_009:src_data -> cmd_xbar_demux_009:sink_data
	wire   [11:0] addr_router_009_src_channel;                                                                   // addr_router_009:src_channel -> cmd_xbar_demux_009:sink_channel
	wire          addr_router_009_src_ready;                                                                     // cmd_xbar_demux_009:sink_ready -> addr_router_009:src_ready
	wire          mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                      // mm_bridge_1_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_010:sink_endofpacket
	wire          mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_valid;                            // mm_bridge_1_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_010:sink_valid
	wire          mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                    // mm_bridge_1_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_010:sink_startofpacket
	wire  [220:0] mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_data;                             // mm_bridge_1_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_010:sink_data
	wire          mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_ready;                            // addr_router_010:sink_ready -> mm_bridge_1_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_010_src_endofpacket;                                                               // addr_router_010:src_endofpacket -> cmd_xbar_demux_010:sink_endofpacket
	wire          addr_router_010_src_valid;                                                                     // addr_router_010:src_valid -> cmd_xbar_demux_010:sink_valid
	wire          addr_router_010_src_startofpacket;                                                             // addr_router_010:src_startofpacket -> cmd_xbar_demux_010:sink_startofpacket
	wire  [220:0] addr_router_010_src_data;                                                                      // addr_router_010:src_data -> cmd_xbar_demux_010:sink_data
	wire   [11:0] addr_router_010_src_channel;                                                                   // addr_router_010:src_channel -> cmd_xbar_demux_010:sink_channel
	wire          addr_router_010_src_ready;                                                                     // cmd_xbar_demux_010:sink_ready -> addr_router_010:src_ready
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;                      // mm_bridge_0_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_011:sink_endofpacket
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_valid;                            // mm_bridge_0_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_011:sink_valid
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;                    // mm_bridge_0_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_011:sink_startofpacket
	wire  [220:0] mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_data;                             // mm_bridge_0_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router_011:sink_data
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_ready;                            // addr_router_011:sink_ready -> mm_bridge_0_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_011_src_endofpacket;                                                               // addr_router_011:src_endofpacket -> cmd_xbar_demux_011:sink_endofpacket
	wire          addr_router_011_src_valid;                                                                     // addr_router_011:src_valid -> cmd_xbar_demux_011:sink_valid
	wire          addr_router_011_src_startofpacket;                                                             // addr_router_011:src_startofpacket -> cmd_xbar_demux_011:sink_startofpacket
	wire  [220:0] addr_router_011_src_data;                                                                      // addr_router_011:src_data -> cmd_xbar_demux_011:sink_data
	wire   [11:0] addr_router_011_src_channel;                                                                   // addr_router_011:src_channel -> cmd_xbar_demux_011:sink_channel
	wire          addr_router_011_src_ready;                                                                     // cmd_xbar_demux_011:sink_ready -> addr_router_011:src_ready
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_valid;                   // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [220:0] mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_data;                    // mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router:sink_ready -> mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_src_endofpacket;                                                                     // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                           // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                   // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [220:0] id_router_src_data;                                                                            // id_router:src_data -> rsp_xbar_demux:sink_data
	wire   [11:0] id_router_src_channel;                                                                         // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                           // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                           // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                                 // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                         // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [220:0] cmd_xbar_demux_001_src0_data;                                                                  // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire   [11:0] cmd_xbar_demux_001_src0_channel;                                                               // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                                 // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          cmd_xbar_demux_002_src0_endofpacket;                                                           // cmd_xbar_demux_002:src0_endofpacket -> cmd_xbar_mux:sink2_endofpacket
	wire          cmd_xbar_demux_002_src0_valid;                                                                 // cmd_xbar_demux_002:src0_valid -> cmd_xbar_mux:sink2_valid
	wire          cmd_xbar_demux_002_src0_startofpacket;                                                         // cmd_xbar_demux_002:src0_startofpacket -> cmd_xbar_mux:sink2_startofpacket
	wire  [220:0] cmd_xbar_demux_002_src0_data;                                                                  // cmd_xbar_demux_002:src0_data -> cmd_xbar_mux:sink2_data
	wire   [11:0] cmd_xbar_demux_002_src0_channel;                                                               // cmd_xbar_demux_002:src0_channel -> cmd_xbar_mux:sink2_channel
	wire          cmd_xbar_demux_002_src0_ready;                                                                 // cmd_xbar_mux:sink2_ready -> cmd_xbar_demux_002:src0_ready
	wire          cmd_xbar_demux_003_src0_endofpacket;                                                           // cmd_xbar_demux_003:src0_endofpacket -> cmd_xbar_mux:sink3_endofpacket
	wire          cmd_xbar_demux_003_src0_valid;                                                                 // cmd_xbar_demux_003:src0_valid -> cmd_xbar_mux:sink3_valid
	wire          cmd_xbar_demux_003_src0_startofpacket;                                                         // cmd_xbar_demux_003:src0_startofpacket -> cmd_xbar_mux:sink3_startofpacket
	wire  [220:0] cmd_xbar_demux_003_src0_data;                                                                  // cmd_xbar_demux_003:src0_data -> cmd_xbar_mux:sink3_data
	wire   [11:0] cmd_xbar_demux_003_src0_channel;                                                               // cmd_xbar_demux_003:src0_channel -> cmd_xbar_mux:sink3_channel
	wire          cmd_xbar_demux_003_src0_ready;                                                                 // cmd_xbar_mux:sink3_ready -> cmd_xbar_demux_003:src0_ready
	wire          cmd_xbar_demux_004_src0_endofpacket;                                                           // cmd_xbar_demux_004:src0_endofpacket -> cmd_xbar_mux:sink4_endofpacket
	wire          cmd_xbar_demux_004_src0_valid;                                                                 // cmd_xbar_demux_004:src0_valid -> cmd_xbar_mux:sink4_valid
	wire          cmd_xbar_demux_004_src0_startofpacket;                                                         // cmd_xbar_demux_004:src0_startofpacket -> cmd_xbar_mux:sink4_startofpacket
	wire  [220:0] cmd_xbar_demux_004_src0_data;                                                                  // cmd_xbar_demux_004:src0_data -> cmd_xbar_mux:sink4_data
	wire   [11:0] cmd_xbar_demux_004_src0_channel;                                                               // cmd_xbar_demux_004:src0_channel -> cmd_xbar_mux:sink4_channel
	wire          cmd_xbar_demux_004_src0_ready;                                                                 // cmd_xbar_mux:sink4_ready -> cmd_xbar_demux_004:src0_ready
	wire          cmd_xbar_demux_005_src0_endofpacket;                                                           // cmd_xbar_demux_005:src0_endofpacket -> cmd_xbar_mux:sink5_endofpacket
	wire          cmd_xbar_demux_005_src0_valid;                                                                 // cmd_xbar_demux_005:src0_valid -> cmd_xbar_mux:sink5_valid
	wire          cmd_xbar_demux_005_src0_startofpacket;                                                         // cmd_xbar_demux_005:src0_startofpacket -> cmd_xbar_mux:sink5_startofpacket
	wire  [220:0] cmd_xbar_demux_005_src0_data;                                                                  // cmd_xbar_demux_005:src0_data -> cmd_xbar_mux:sink5_data
	wire   [11:0] cmd_xbar_demux_005_src0_channel;                                                               // cmd_xbar_demux_005:src0_channel -> cmd_xbar_mux:sink5_channel
	wire          cmd_xbar_demux_005_src0_ready;                                                                 // cmd_xbar_mux:sink5_ready -> cmd_xbar_demux_005:src0_ready
	wire          cmd_xbar_demux_006_src0_endofpacket;                                                           // cmd_xbar_demux_006:src0_endofpacket -> cmd_xbar_mux:sink6_endofpacket
	wire          cmd_xbar_demux_006_src0_valid;                                                                 // cmd_xbar_demux_006:src0_valid -> cmd_xbar_mux:sink6_valid
	wire          cmd_xbar_demux_006_src0_startofpacket;                                                         // cmd_xbar_demux_006:src0_startofpacket -> cmd_xbar_mux:sink6_startofpacket
	wire  [220:0] cmd_xbar_demux_006_src0_data;                                                                  // cmd_xbar_demux_006:src0_data -> cmd_xbar_mux:sink6_data
	wire   [11:0] cmd_xbar_demux_006_src0_channel;                                                               // cmd_xbar_demux_006:src0_channel -> cmd_xbar_mux:sink6_channel
	wire          cmd_xbar_demux_006_src0_ready;                                                                 // cmd_xbar_mux:sink6_ready -> cmd_xbar_demux_006:src0_ready
	wire          cmd_xbar_demux_007_src0_endofpacket;                                                           // cmd_xbar_demux_007:src0_endofpacket -> cmd_xbar_mux:sink7_endofpacket
	wire          cmd_xbar_demux_007_src0_valid;                                                                 // cmd_xbar_demux_007:src0_valid -> cmd_xbar_mux:sink7_valid
	wire          cmd_xbar_demux_007_src0_startofpacket;                                                         // cmd_xbar_demux_007:src0_startofpacket -> cmd_xbar_mux:sink7_startofpacket
	wire  [220:0] cmd_xbar_demux_007_src0_data;                                                                  // cmd_xbar_demux_007:src0_data -> cmd_xbar_mux:sink7_data
	wire   [11:0] cmd_xbar_demux_007_src0_channel;                                                               // cmd_xbar_demux_007:src0_channel -> cmd_xbar_mux:sink7_channel
	wire          cmd_xbar_demux_007_src0_ready;                                                                 // cmd_xbar_mux:sink7_ready -> cmd_xbar_demux_007:src0_ready
	wire          cmd_xbar_demux_008_src0_endofpacket;                                                           // cmd_xbar_demux_008:src0_endofpacket -> cmd_xbar_mux:sink8_endofpacket
	wire          cmd_xbar_demux_008_src0_valid;                                                                 // cmd_xbar_demux_008:src0_valid -> cmd_xbar_mux:sink8_valid
	wire          cmd_xbar_demux_008_src0_startofpacket;                                                         // cmd_xbar_demux_008:src0_startofpacket -> cmd_xbar_mux:sink8_startofpacket
	wire  [220:0] cmd_xbar_demux_008_src0_data;                                                                  // cmd_xbar_demux_008:src0_data -> cmd_xbar_mux:sink8_data
	wire   [11:0] cmd_xbar_demux_008_src0_channel;                                                               // cmd_xbar_demux_008:src0_channel -> cmd_xbar_mux:sink8_channel
	wire          cmd_xbar_demux_008_src0_ready;                                                                 // cmd_xbar_mux:sink8_ready -> cmd_xbar_demux_008:src0_ready
	wire          cmd_xbar_demux_009_src0_endofpacket;                                                           // cmd_xbar_demux_009:src0_endofpacket -> cmd_xbar_mux:sink9_endofpacket
	wire          cmd_xbar_demux_009_src0_valid;                                                                 // cmd_xbar_demux_009:src0_valid -> cmd_xbar_mux:sink9_valid
	wire          cmd_xbar_demux_009_src0_startofpacket;                                                         // cmd_xbar_demux_009:src0_startofpacket -> cmd_xbar_mux:sink9_startofpacket
	wire  [220:0] cmd_xbar_demux_009_src0_data;                                                                  // cmd_xbar_demux_009:src0_data -> cmd_xbar_mux:sink9_data
	wire   [11:0] cmd_xbar_demux_009_src0_channel;                                                               // cmd_xbar_demux_009:src0_channel -> cmd_xbar_mux:sink9_channel
	wire          cmd_xbar_demux_009_src0_ready;                                                                 // cmd_xbar_mux:sink9_ready -> cmd_xbar_demux_009:src0_ready
	wire          cmd_xbar_demux_010_src0_endofpacket;                                                           // cmd_xbar_demux_010:src0_endofpacket -> cmd_xbar_mux:sink10_endofpacket
	wire          cmd_xbar_demux_010_src0_valid;                                                                 // cmd_xbar_demux_010:src0_valid -> cmd_xbar_mux:sink10_valid
	wire          cmd_xbar_demux_010_src0_startofpacket;                                                         // cmd_xbar_demux_010:src0_startofpacket -> cmd_xbar_mux:sink10_startofpacket
	wire  [220:0] cmd_xbar_demux_010_src0_data;                                                                  // cmd_xbar_demux_010:src0_data -> cmd_xbar_mux:sink10_data
	wire   [11:0] cmd_xbar_demux_010_src0_channel;                                                               // cmd_xbar_demux_010:src0_channel -> cmd_xbar_mux:sink10_channel
	wire          cmd_xbar_demux_010_src0_ready;                                                                 // cmd_xbar_mux:sink10_ready -> cmd_xbar_demux_010:src0_ready
	wire          cmd_xbar_demux_011_src0_endofpacket;                                                           // cmd_xbar_demux_011:src0_endofpacket -> cmd_xbar_mux:sink11_endofpacket
	wire          cmd_xbar_demux_011_src0_valid;                                                                 // cmd_xbar_demux_011:src0_valid -> cmd_xbar_mux:sink11_valid
	wire          cmd_xbar_demux_011_src0_startofpacket;                                                         // cmd_xbar_demux_011:src0_startofpacket -> cmd_xbar_mux:sink11_startofpacket
	wire  [220:0] cmd_xbar_demux_011_src0_data;                                                                  // cmd_xbar_demux_011:src0_data -> cmd_xbar_mux:sink11_data
	wire   [11:0] cmd_xbar_demux_011_src0_channel;                                                               // cmd_xbar_demux_011:src0_channel -> cmd_xbar_mux:sink11_channel
	wire          cmd_xbar_demux_011_src0_ready;                                                                 // cmd_xbar_mux:sink11_ready -> cmd_xbar_demux_011:src0_ready
	wire          rsp_xbar_demux_src1_endofpacket;                                                               // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                     // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                             // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src1_data;                                                                      // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire   [11:0] rsp_xbar_demux_src1_channel;                                                                   // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_src1_ready;                                                                     // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire          rsp_xbar_demux_src2_endofpacket;                                                               // rsp_xbar_demux:src2_endofpacket -> rsp_xbar_mux_002:sink0_endofpacket
	wire          rsp_xbar_demux_src2_valid;                                                                     // rsp_xbar_demux:src2_valid -> rsp_xbar_mux_002:sink0_valid
	wire          rsp_xbar_demux_src2_startofpacket;                                                             // rsp_xbar_demux:src2_startofpacket -> rsp_xbar_mux_002:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src2_data;                                                                      // rsp_xbar_demux:src2_data -> rsp_xbar_mux_002:sink0_data
	wire   [11:0] rsp_xbar_demux_src2_channel;                                                                   // rsp_xbar_demux:src2_channel -> rsp_xbar_mux_002:sink0_channel
	wire          rsp_xbar_demux_src2_ready;                                                                     // rsp_xbar_mux_002:sink0_ready -> rsp_xbar_demux:src2_ready
	wire          rsp_xbar_demux_src3_endofpacket;                                                               // rsp_xbar_demux:src3_endofpacket -> rsp_xbar_mux_003:sink0_endofpacket
	wire          rsp_xbar_demux_src3_valid;                                                                     // rsp_xbar_demux:src3_valid -> rsp_xbar_mux_003:sink0_valid
	wire          rsp_xbar_demux_src3_startofpacket;                                                             // rsp_xbar_demux:src3_startofpacket -> rsp_xbar_mux_003:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src3_data;                                                                      // rsp_xbar_demux:src3_data -> rsp_xbar_mux_003:sink0_data
	wire   [11:0] rsp_xbar_demux_src3_channel;                                                                   // rsp_xbar_demux:src3_channel -> rsp_xbar_mux_003:sink0_channel
	wire          rsp_xbar_demux_src3_ready;                                                                     // rsp_xbar_mux_003:sink0_ready -> rsp_xbar_demux:src3_ready
	wire          rsp_xbar_demux_src4_endofpacket;                                                               // rsp_xbar_demux:src4_endofpacket -> rsp_xbar_mux_004:sink0_endofpacket
	wire          rsp_xbar_demux_src4_valid;                                                                     // rsp_xbar_demux:src4_valid -> rsp_xbar_mux_004:sink0_valid
	wire          rsp_xbar_demux_src4_startofpacket;                                                             // rsp_xbar_demux:src4_startofpacket -> rsp_xbar_mux_004:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src4_data;                                                                      // rsp_xbar_demux:src4_data -> rsp_xbar_mux_004:sink0_data
	wire   [11:0] rsp_xbar_demux_src4_channel;                                                                   // rsp_xbar_demux:src4_channel -> rsp_xbar_mux_004:sink0_channel
	wire          rsp_xbar_demux_src4_ready;                                                                     // rsp_xbar_mux_004:sink0_ready -> rsp_xbar_demux:src4_ready
	wire          rsp_xbar_demux_src5_endofpacket;                                                               // rsp_xbar_demux:src5_endofpacket -> rsp_xbar_mux_005:sink0_endofpacket
	wire          rsp_xbar_demux_src5_valid;                                                                     // rsp_xbar_demux:src5_valid -> rsp_xbar_mux_005:sink0_valid
	wire          rsp_xbar_demux_src5_startofpacket;                                                             // rsp_xbar_demux:src5_startofpacket -> rsp_xbar_mux_005:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src5_data;                                                                      // rsp_xbar_demux:src5_data -> rsp_xbar_mux_005:sink0_data
	wire   [11:0] rsp_xbar_demux_src5_channel;                                                                   // rsp_xbar_demux:src5_channel -> rsp_xbar_mux_005:sink0_channel
	wire          rsp_xbar_demux_src5_ready;                                                                     // rsp_xbar_mux_005:sink0_ready -> rsp_xbar_demux:src5_ready
	wire          rsp_xbar_demux_src6_endofpacket;                                                               // rsp_xbar_demux:src6_endofpacket -> rsp_xbar_mux_006:sink0_endofpacket
	wire          rsp_xbar_demux_src6_valid;                                                                     // rsp_xbar_demux:src6_valid -> rsp_xbar_mux_006:sink0_valid
	wire          rsp_xbar_demux_src6_startofpacket;                                                             // rsp_xbar_demux:src6_startofpacket -> rsp_xbar_mux_006:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src6_data;                                                                      // rsp_xbar_demux:src6_data -> rsp_xbar_mux_006:sink0_data
	wire   [11:0] rsp_xbar_demux_src6_channel;                                                                   // rsp_xbar_demux:src6_channel -> rsp_xbar_mux_006:sink0_channel
	wire          rsp_xbar_demux_src6_ready;                                                                     // rsp_xbar_mux_006:sink0_ready -> rsp_xbar_demux:src6_ready
	wire          rsp_xbar_demux_src7_endofpacket;                                                               // rsp_xbar_demux:src7_endofpacket -> rsp_xbar_mux_007:sink0_endofpacket
	wire          rsp_xbar_demux_src7_valid;                                                                     // rsp_xbar_demux:src7_valid -> rsp_xbar_mux_007:sink0_valid
	wire          rsp_xbar_demux_src7_startofpacket;                                                             // rsp_xbar_demux:src7_startofpacket -> rsp_xbar_mux_007:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src7_data;                                                                      // rsp_xbar_demux:src7_data -> rsp_xbar_mux_007:sink0_data
	wire   [11:0] rsp_xbar_demux_src7_channel;                                                                   // rsp_xbar_demux:src7_channel -> rsp_xbar_mux_007:sink0_channel
	wire          rsp_xbar_demux_src7_ready;                                                                     // rsp_xbar_mux_007:sink0_ready -> rsp_xbar_demux:src7_ready
	wire          rsp_xbar_demux_src8_endofpacket;                                                               // rsp_xbar_demux:src8_endofpacket -> rsp_xbar_mux_008:sink0_endofpacket
	wire          rsp_xbar_demux_src8_valid;                                                                     // rsp_xbar_demux:src8_valid -> rsp_xbar_mux_008:sink0_valid
	wire          rsp_xbar_demux_src8_startofpacket;                                                             // rsp_xbar_demux:src8_startofpacket -> rsp_xbar_mux_008:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src8_data;                                                                      // rsp_xbar_demux:src8_data -> rsp_xbar_mux_008:sink0_data
	wire   [11:0] rsp_xbar_demux_src8_channel;                                                                   // rsp_xbar_demux:src8_channel -> rsp_xbar_mux_008:sink0_channel
	wire          rsp_xbar_demux_src8_ready;                                                                     // rsp_xbar_mux_008:sink0_ready -> rsp_xbar_demux:src8_ready
	wire          rsp_xbar_demux_src9_endofpacket;                                                               // rsp_xbar_demux:src9_endofpacket -> rsp_xbar_mux_009:sink0_endofpacket
	wire          rsp_xbar_demux_src9_valid;                                                                     // rsp_xbar_demux:src9_valid -> rsp_xbar_mux_009:sink0_valid
	wire          rsp_xbar_demux_src9_startofpacket;                                                             // rsp_xbar_demux:src9_startofpacket -> rsp_xbar_mux_009:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src9_data;                                                                      // rsp_xbar_demux:src9_data -> rsp_xbar_mux_009:sink0_data
	wire   [11:0] rsp_xbar_demux_src9_channel;                                                                   // rsp_xbar_demux:src9_channel -> rsp_xbar_mux_009:sink0_channel
	wire          rsp_xbar_demux_src9_ready;                                                                     // rsp_xbar_mux_009:sink0_ready -> rsp_xbar_demux:src9_ready
	wire          rsp_xbar_demux_src10_endofpacket;                                                              // rsp_xbar_demux:src10_endofpacket -> rsp_xbar_mux_010:sink0_endofpacket
	wire          rsp_xbar_demux_src10_valid;                                                                    // rsp_xbar_demux:src10_valid -> rsp_xbar_mux_010:sink0_valid
	wire          rsp_xbar_demux_src10_startofpacket;                                                            // rsp_xbar_demux:src10_startofpacket -> rsp_xbar_mux_010:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src10_data;                                                                     // rsp_xbar_demux:src10_data -> rsp_xbar_mux_010:sink0_data
	wire   [11:0] rsp_xbar_demux_src10_channel;                                                                  // rsp_xbar_demux:src10_channel -> rsp_xbar_mux_010:sink0_channel
	wire          rsp_xbar_demux_src10_ready;                                                                    // rsp_xbar_mux_010:sink0_ready -> rsp_xbar_demux:src10_ready
	wire          rsp_xbar_demux_src11_endofpacket;                                                              // rsp_xbar_demux:src11_endofpacket -> rsp_xbar_mux_011:sink0_endofpacket
	wire          rsp_xbar_demux_src11_valid;                                                                    // rsp_xbar_demux:src11_valid -> rsp_xbar_mux_011:sink0_valid
	wire          rsp_xbar_demux_src11_startofpacket;                                                            // rsp_xbar_demux:src11_startofpacket -> rsp_xbar_mux_011:sink0_startofpacket
	wire  [220:0] rsp_xbar_demux_src11_data;                                                                     // rsp_xbar_demux:src11_data -> rsp_xbar_mux_011:sink0_data
	wire   [11:0] rsp_xbar_demux_src11_channel;                                                                  // rsp_xbar_demux:src11_channel -> rsp_xbar_mux_011:sink0_channel
	wire          rsp_xbar_demux_src11_ready;                                                                    // rsp_xbar_mux_011:sink0_ready -> rsp_xbar_demux:src11_ready
	wire          cmd_xbar_demux_src0_endofpacket;                                                               // cmd_xbar_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                     // cmd_xbar_demux:src0_valid -> crosser:in_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                             // cmd_xbar_demux:src0_startofpacket -> crosser:in_startofpacket
	wire  [220:0] cmd_xbar_demux_src0_data;                                                                      // cmd_xbar_demux:src0_data -> crosser:in_data
	wire   [11:0] cmd_xbar_demux_src0_channel;                                                                   // cmd_xbar_demux:src0_channel -> crosser:in_channel
	wire          cmd_xbar_demux_src0_ready;                                                                     // crosser:in_ready -> cmd_xbar_demux:src0_ready
	wire          crosser_out_endofpacket;                                                                       // crosser:out_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          crosser_out_valid;                                                                             // crosser:out_valid -> cmd_xbar_mux:sink0_valid
	wire          crosser_out_startofpacket;                                                                     // crosser:out_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [220:0] crosser_out_data;                                                                              // crosser:out_data -> cmd_xbar_mux:sink0_data
	wire   [11:0] crosser_out_channel;                                                                           // crosser:out_channel -> cmd_xbar_mux:sink0_channel
	wire          crosser_out_ready;                                                                             // cmd_xbar_mux:sink0_ready -> crosser:out_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                               // rsp_xbar_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                     // rsp_xbar_demux:src0_valid -> crosser_001:in_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                             // rsp_xbar_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire  [220:0] rsp_xbar_demux_src0_data;                                                                      // rsp_xbar_demux:src0_data -> crosser_001:in_data
	wire   [11:0] rsp_xbar_demux_src0_channel;                                                                   // rsp_xbar_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_xbar_demux_src0_ready;                                                                     // crosser_001:in_ready -> rsp_xbar_demux:src0_ready
	wire          crosser_001_out_endofpacket;                                                                   // crosser_001:out_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          crosser_001_out_valid;                                                                         // crosser_001:out_valid -> rsp_xbar_mux:sink0_valid
	wire          crosser_001_out_startofpacket;                                                                 // crosser_001:out_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [220:0] crosser_001_out_data;                                                                          // crosser_001:out_data -> rsp_xbar_mux:sink0_data
	wire   [11:0] crosser_001_out_channel;                                                                       // crosser_001:out_channel -> rsp_xbar_mux:sink0_channel
	wire          crosser_001_out_ready;                                                                         // rsp_xbar_mux:sink0_ready -> crosser_001:out_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_10_m0_translator (
		.clk                      (clock_bridge_1_out_clk_clk),                                         //                       clk.clk
		.reset                    (mm_bridge_10_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address              (mm_bridge_10_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_10_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_10_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_10_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_10_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_10_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_10_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_10_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_10_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_10_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_10_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_10_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_10_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_10_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_10_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_10_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_10_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_10_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_10_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_10_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_10_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_11_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                                //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address              (mm_bridge_11_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_11_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_11_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_11_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_11_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_11_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_11_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_11_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_11_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_11_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_11_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_11_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_11_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_11_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_11_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_11_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_11_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_11_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_11_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_11_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_11_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_9_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                               //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address              (mm_bridge_9_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_9_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_9_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_9_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_9_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_9_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_9_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_9_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_9_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_9_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_9_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_9_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_9_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_9_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_9_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_9_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_9_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_9_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_9_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_9_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_9_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_8_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                               //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address              (mm_bridge_8_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_8_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_8_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_8_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_8_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_8_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_8_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_8_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_8_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_8_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_8_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_8_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_8_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_8_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_8_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_8_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_8_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_8_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_8_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_8_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_8_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_6_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                               //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address              (mm_bridge_6_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_6_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_6_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_6_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_6_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_6_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_6_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_6_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_6_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_6_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_6_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_6_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_6_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_6_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_6_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_6_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_6_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_6_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_6_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_6_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_6_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_7_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                               //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address              (mm_bridge_7_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_7_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_7_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_7_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_7_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_7_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_7_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_7_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_7_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_7_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_7_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_7_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_7_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_7_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_7_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_7_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_7_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_7_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_7_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_7_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_7_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_5_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                               //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address              (mm_bridge_5_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_5_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_5_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_5_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_5_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_5_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_5_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_5_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_5_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_5_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_5_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_5_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_5_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_5_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_5_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_5_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_5_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_5_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_5_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_5_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_5_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_4_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                               //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address              (mm_bridge_4_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_4_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_4_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_4_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_4_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_4_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_4_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_4_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_4_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_4_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_4_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_4_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_4_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_4_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_4_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_4_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_4_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_4_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_4_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_4_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_4_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_3_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                               //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address              (mm_bridge_3_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_3_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_3_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_3_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_3_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_3_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_3_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_3_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_3_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_3_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_3_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_3_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_3_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_3_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_3_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_3_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_3_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_3_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_3_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_3_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_3_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_2_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                               //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address              (mm_bridge_2_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_2_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_2_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_2_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_2_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_2_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_2_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_2_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_2_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_2_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_2_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_2_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_2_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_2_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_2_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_2_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_2_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_2_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_2_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_2_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_2_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_1_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                               //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address              (mm_bridge_1_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_1_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_1_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_1_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_1_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_1_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_1_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_1_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_1_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_1_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_1_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_1_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_1_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_1_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_1_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_1_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                               //                       clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address              (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (6),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_if_ddr3_emif_0_avl_0_translator (
		.clk                      (mem_if_ddr3_emif_0_afi_half_clk_clk),                                                 //                      clk.clk
		.reset                    (mm_bridge_11_reset_reset_bridge_in_reset_reset),                                      //                    reset.reset
		.uav_address              (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (mem_if_ddr3_emif_0_avl_0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (mem_if_ddr3_emif_0_avl_0_write),                                                      //                         .write
		.av_read                  (mem_if_ddr3_emif_0_avl_0_read),                                                       //                         .read
		.av_readdata              (mem_if_ddr3_emif_0_avl_0_readdata),                                                   //                         .readdata
		.av_writedata             (mem_if_ddr3_emif_0_avl_0_writedata),                                                  //                         .writedata
		.av_beginbursttransfer    (mem_if_ddr3_emif_0_avl_0_beginbursttransfer),                                         //                         .beginbursttransfer
		.av_burstcount            (mem_if_ddr3_emif_0_avl_0_burstcount),                                                 //                         .burstcount
		.av_byteenable            (mem_if_ddr3_emif_0_avl_0_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (mem_if_ddr3_emif_0_avl_0_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (mem_if_ddr3_emif_0_avl_0_waitrequest),                                                //                         .waitrequest
		.av_begintransfer         (),                                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                                    //              (terminated)
		.av_lock                  (),                                                                                    //              (terminated)
		.av_chipselect            (),                                                                                    //              (terminated)
		.av_clken                 (),                                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                                //              (terminated)
		.av_debugaccess           (),                                                                                    //              (terminated)
		.av_outputenable          (),                                                                                    //              (terminated)
		.uav_response             (),                                                                                    //              (terminated)
		.av_response              (2'b00),                                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_10_m0_translator_avalon_universal_master_0_agent (
		.clk                     (clock_bridge_1_out_clk_clk),                                                  //       clk.clk
		.reset                   (mm_bridge_10_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address              (mm_bridge_10_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_10_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_10_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_10_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_10_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_10_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_10_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_10_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_10_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_10_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_10_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_src_valid),                                                      //        rp.valid
		.rp_data                 (rsp_xbar_mux_src_data),                                                       //          .data
		.rp_channel              (rsp_xbar_mux_src_channel),                                                    //          .channel
		.rp_startofpacket        (rsp_xbar_mux_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_src_endofpacket),                                                //          .endofpacket
		.rp_ready                (rsp_xbar_mux_src_ready),                                                      //          .ready
		.av_response             (),                                                                            // (terminated)
		.av_writeresponserequest (1'b0),                                                                        // (terminated)
		.av_writeresponsevalid   ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_11_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                         //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address              (mm_bridge_11_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_11_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_11_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_11_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_11_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_11_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_11_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_11_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_11_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_11_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_11_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_001_src_valid),                                                  //        rp.valid
		.rp_data                 (rsp_xbar_mux_001_src_data),                                                   //          .data
		.rp_channel              (rsp_xbar_mux_001_src_channel),                                                //          .channel
		.rp_startofpacket        (rsp_xbar_mux_001_src_startofpacket),                                          //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_001_src_endofpacket),                                            //          .endofpacket
		.rp_ready                (rsp_xbar_mux_001_src_ready),                                                  //          .ready
		.av_response             (),                                                                            // (terminated)
		.av_writeresponserequest (1'b0),                                                                        // (terminated)
		.av_writeresponsevalid   ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (11),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_9_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address              (mm_bridge_9_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_9_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_9_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_9_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_9_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_9_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_9_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_9_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_9_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_9_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_9_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_002_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_002_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_002_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_002_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_002_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_002_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (10),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_8_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address              (mm_bridge_8_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_8_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_8_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_8_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_8_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_8_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_8_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_8_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_8_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_8_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_8_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_003_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_003_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_003_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_003_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_003_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_003_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (8),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_6_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address              (mm_bridge_6_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_6_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_6_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_6_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_6_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_6_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_6_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_6_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_6_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_6_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_6_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_004_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_004_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_004_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_004_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_004_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_004_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (9),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_7_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address              (mm_bridge_7_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_7_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_7_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_7_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_7_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_7_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_7_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_7_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_7_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_7_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_7_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_005_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_005_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_005_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_005_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_005_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_005_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (7),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_5_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address              (mm_bridge_5_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_5_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_5_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_5_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_5_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_5_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_5_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_5_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_5_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_5_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_5_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_006_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_006_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_006_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_006_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_006_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_006_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_4_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address              (mm_bridge_4_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_4_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_4_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_4_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_4_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_4_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_4_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_4_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_4_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_4_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_4_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_007_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_007_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_007_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_007_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_007_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_007_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_3_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address              (mm_bridge_3_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_3_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_3_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_3_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_3_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_3_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_3_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_3_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_3_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_3_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_3_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_008_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_008_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_008_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_008_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_008_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_008_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_2_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address              (mm_bridge_2_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_2_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_2_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_2_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_2_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_2_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_2_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_2_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_2_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_2_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_2_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_009_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_009_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_009_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_009_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_009_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_009_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_1_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address              (mm_bridge_1_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_1_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_1_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_1_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_1_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_1_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_1_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_1_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_1_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_1_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_010_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_010_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_010_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_010_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_010_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_010_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BEGIN_BURST           (198),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_THREAD_ID_H           (208),
		.PKT_THREAD_ID_L           (208),
		.PKT_CACHE_H               (215),
		.PKT_CACHE_L               (212),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_DATA_W                 (221),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_translator_avalon_universal_master_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address              (mm_bridge_0_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (mm_bridge_0_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (mm_bridge_0_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_011_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_011_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_011_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_011_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_011_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_011_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (198),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_TRANS_LOCK            (178),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_ORI_BURST_SIZE_H      (220),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (221),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_half_clk_clk),                                                           //             clk.clk
		.reset                   (mm_bridge_11_reset_reset_bridge_in_reset_reset),                                                //       clk_reset.reset
		.m0_address              (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_src_ready),                                                                        //              cp.ready
		.cp_valid                (cmd_xbar_mux_src_valid),                                                                        //                .valid
		.cp_data                 (cmd_xbar_mux_src_data),                                                                         //                .data
		.cp_startofpacket        (cmd_xbar_mux_src_startofpacket),                                                                //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_src_endofpacket),                                                                  //                .endofpacket
		.cp_channel              (cmd_xbar_mux_src_channel),                                                                      //                .channel
		.rf_sink_ready           (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (222),
		.FIFO_DEPTH          (49),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_half_clk_clk),                                                           //       clk.clk
		.reset             (mm_bridge_11_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                         // (terminated)
		.csr_read          (1'b0),                                                                                          // (terminated)
		.csr_write         (1'b0),                                                                                          // (terminated)
		.csr_readdata      (),                                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                          // (terminated)
		.almost_full_data  (),                                                                                              // (terminated)
		.almost_empty_data (),                                                                                              // (terminated)
		.in_empty          (1'b0),                                                                                          // (terminated)
		.out_empty         (),                                                                                              // (terminated)
		.in_error          (1'b0),                                                                                          // (terminated)
		.out_error         (),                                                                                              // (terminated)
		.in_channel        (1'b0),                                                                                          // (terminated)
		.out_channel       ()                                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2048),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_half_clk_clk),                                                     //       clk.clk
		.reset             (mm_bridge_11_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                   // (terminated)
		.csr_read          (1'b0),                                                                                    // (terminated)
		.csr_write         (1'b0),                                                                                    // (terminated)
		.csr_readdata      (),                                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                    // (terminated)
		.almost_full_data  (),                                                                                        // (terminated)
		.almost_empty_data (),                                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                                    // (terminated)
		.out_startofpacket (),                                                                                        // (terminated)
		.out_endofpacket   (),                                                                                        // (terminated)
		.in_empty          (1'b0),                                                                                    // (terminated)
		.out_empty         (),                                                                                        // (terminated)
		.in_error          (1'b0),                                                                                    // (terminated)
		.out_error         (),                                                                                        // (terminated)
		.in_channel        (1'b0),                                                                                    // (terminated)
		.out_channel       ()                                                                                         // (terminated)
	);

	fpga_mem_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_10_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clock_bridge_1_out_clk_clk),                                                  //       clk.clk
		.reset              (mm_bridge_10_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                       //       src.ready
		.src_valid          (addr_router_src_valid),                                                       //          .valid
		.src_data           (addr_router_src_data),                                                        //          .data
		.src_channel        (addr_router_src_channel),                                                     //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                               //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                  //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_001 (
		.sink_ready         (mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_11_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                         //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                   //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                   //          .valid
		.src_data           (addr_router_001_src_data),                                                    //          .data
		.src_channel        (addr_router_001_src_channel),                                                 //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                              //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_002 (
		.sink_ready         (mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_9_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (addr_router_002_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_002_src_valid),                                                  //          .valid
		.src_data           (addr_router_002_src_data),                                                   //          .data
		.src_channel        (addr_router_002_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_002_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_002_src_endofpacket)                                             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_003 (
		.sink_ready         (mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_8_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (addr_router_003_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_003_src_valid),                                                  //          .valid
		.src_data           (addr_router_003_src_data),                                                   //          .data
		.src_channel        (addr_router_003_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_003_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_003_src_endofpacket)                                             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_004 (
		.sink_ready         (mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_6_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (addr_router_004_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_004_src_valid),                                                  //          .valid
		.src_data           (addr_router_004_src_data),                                                   //          .data
		.src_channel        (addr_router_004_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_004_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_004_src_endofpacket)                                             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_005 (
		.sink_ready         (mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_7_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (addr_router_005_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_005_src_valid),                                                  //          .valid
		.src_data           (addr_router_005_src_data),                                                   //          .data
		.src_channel        (addr_router_005_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_005_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_005_src_endofpacket)                                             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_006 (
		.sink_ready         (mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_5_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (addr_router_006_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_006_src_valid),                                                  //          .valid
		.src_data           (addr_router_006_src_data),                                                   //          .data
		.src_channel        (addr_router_006_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_006_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_006_src_endofpacket)                                             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_007 (
		.sink_ready         (mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_4_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (addr_router_007_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_007_src_valid),                                                  //          .valid
		.src_data           (addr_router_007_src_data),                                                   //          .data
		.src_channel        (addr_router_007_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_007_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_007_src_endofpacket)                                             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_008 (
		.sink_ready         (mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_3_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (addr_router_008_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_008_src_valid),                                                  //          .valid
		.src_data           (addr_router_008_src_data),                                                   //          .data
		.src_channel        (addr_router_008_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_008_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_008_src_endofpacket)                                             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_009 (
		.sink_ready         (mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_2_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (addr_router_009_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_009_src_valid),                                                  //          .valid
		.src_data           (addr_router_009_src_data),                                                   //          .data
		.src_channel        (addr_router_009_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_009_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_009_src_endofpacket)                                             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_010 (
		.sink_ready         (mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_1_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (addr_router_010_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_010_src_valid),                                                  //          .valid
		.src_data           (addr_router_010_src_data),                                                   //          .data
		.src_channel        (addr_router_010_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_010_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_010_src_endofpacket)                                             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_addr_router_001 addr_router_011 (
		.sink_ready         (mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (addr_router_011_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_011_src_valid),                                                  //          .valid
		.src_data           (addr_router_011_src_data),                                                   //          .data
		.src_channel        (addr_router_011_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_011_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_011_src_endofpacket)                                             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_id_router id_router (
		.sink_ready         (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_0_avl_0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),                                                 //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                                 //       src.ready
		.src_valid          (id_router_src_valid),                                                                 //          .valid
		.src_data           (id_router_src_data),                                                                  //          .data
		.src_channel        (id_router_src_channel),                                                               //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                            //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (clock_bridge_1_out_clk_clk),                     //       clk.clk
		.reset              (mm_bridge_10_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_src_ready),                          //      sink.ready
		.sink_channel       (addr_router_src_channel),                        //          .channel
		.sink_data          (addr_router_src_data),                           //          .data
		.sink_startofpacket (addr_router_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (addr_router_src_endofpacket),                    //          .endofpacket
		.sink_valid         (addr_router_src_valid),                          //          .valid
		.src0_ready         (cmd_xbar_demux_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                      //          .valid
		.src0_data          (cmd_xbar_demux_src0_data),                       //          .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket)                 //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_001 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_001_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_001_src_channel),                    //          .channel
		.sink_data          (addr_router_001_src_data),                       //          .data
		.sink_startofpacket (addr_router_001_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_001_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_001_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_001_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_002 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_002_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_002_src_channel),                    //          .channel
		.sink_data          (addr_router_002_src_data),                       //          .data
		.sink_startofpacket (addr_router_002_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_002_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_002_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_002_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_002_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_002_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_002_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_002_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_002_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_003 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_003_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_003_src_channel),                    //          .channel
		.sink_data          (addr_router_003_src_data),                       //          .data
		.sink_startofpacket (addr_router_003_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_003_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_003_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_003_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_003_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_003_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_003_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_003_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_003_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_004 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_004_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_004_src_channel),                    //          .channel
		.sink_data          (addr_router_004_src_data),                       //          .data
		.sink_startofpacket (addr_router_004_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_004_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_004_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_004_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_004_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_004_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_004_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_004_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_004_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_005 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_005_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_005_src_channel),                    //          .channel
		.sink_data          (addr_router_005_src_data),                       //          .data
		.sink_startofpacket (addr_router_005_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_005_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_005_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_005_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_005_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_005_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_005_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_005_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_005_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_006 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_006_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_006_src_channel),                    //          .channel
		.sink_data          (addr_router_006_src_data),                       //          .data
		.sink_startofpacket (addr_router_006_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_006_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_006_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_006_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_006_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_006_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_006_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_006_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_006_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_007 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_007_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_007_src_channel),                    //          .channel
		.sink_data          (addr_router_007_src_data),                       //          .data
		.sink_startofpacket (addr_router_007_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_007_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_007_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_007_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_007_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_007_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_007_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_007_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_007_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_008 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_008_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_008_src_channel),                    //          .channel
		.sink_data          (addr_router_008_src_data),                       //          .data
		.sink_startofpacket (addr_router_008_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_008_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_008_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_008_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_008_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_008_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_008_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_008_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_008_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_009 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_009_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_009_src_channel),                    //          .channel
		.sink_data          (addr_router_009_src_data),                       //          .data
		.sink_startofpacket (addr_router_009_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_009_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_009_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_009_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_009_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_009_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_009_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_009_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_009_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_010 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_010_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_010_src_channel),                    //          .channel
		.sink_data          (addr_router_010_src_data),                       //          .data
		.sink_startofpacket (addr_router_010_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_010_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_010_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_010_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_010_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_010_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_010_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_010_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_010_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_011 (
		.clk                (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset              (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_011_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_011_src_channel),                    //          .channel
		.sink_data          (addr_router_011_src_data),                       //          .data
		.sink_startofpacket (addr_router_011_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_011_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_011_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_011_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_011_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_011_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_011_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_011_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_011_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                  (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset                (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (cmd_xbar_mux_src_ready),                         //       src.ready
		.src_valid            (cmd_xbar_mux_src_valid),                         //          .valid
		.src_data             (cmd_xbar_mux_src_data),                          //          .data
		.src_channel          (cmd_xbar_mux_src_channel),                       //          .channel
		.src_startofpacket    (cmd_xbar_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket      (cmd_xbar_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready          (crosser_out_ready),                              //     sink0.ready
		.sink0_valid          (crosser_out_valid),                              //          .valid
		.sink0_channel        (crosser_out_channel),                            //          .channel
		.sink0_data           (crosser_out_data),                               //          .data
		.sink0_startofpacket  (crosser_out_startofpacket),                      //          .startofpacket
		.sink0_endofpacket    (crosser_out_endofpacket),                        //          .endofpacket
		.sink1_ready          (cmd_xbar_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid          (cmd_xbar_demux_001_src0_valid),                  //          .valid
		.sink1_channel        (cmd_xbar_demux_001_src0_channel),                //          .channel
		.sink1_data           (cmd_xbar_demux_001_src0_data),                   //          .data
		.sink1_startofpacket  (cmd_xbar_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket    (cmd_xbar_demux_001_src0_endofpacket),            //          .endofpacket
		.sink2_ready          (cmd_xbar_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid          (cmd_xbar_demux_002_src0_valid),                  //          .valid
		.sink2_channel        (cmd_xbar_demux_002_src0_channel),                //          .channel
		.sink2_data           (cmd_xbar_demux_002_src0_data),                   //          .data
		.sink2_startofpacket  (cmd_xbar_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket    (cmd_xbar_demux_002_src0_endofpacket),            //          .endofpacket
		.sink3_ready          (cmd_xbar_demux_003_src0_ready),                  //     sink3.ready
		.sink3_valid          (cmd_xbar_demux_003_src0_valid),                  //          .valid
		.sink3_channel        (cmd_xbar_demux_003_src0_channel),                //          .channel
		.sink3_data           (cmd_xbar_demux_003_src0_data),                   //          .data
		.sink3_startofpacket  (cmd_xbar_demux_003_src0_startofpacket),          //          .startofpacket
		.sink3_endofpacket    (cmd_xbar_demux_003_src0_endofpacket),            //          .endofpacket
		.sink4_ready          (cmd_xbar_demux_004_src0_ready),                  //     sink4.ready
		.sink4_valid          (cmd_xbar_demux_004_src0_valid),                  //          .valid
		.sink4_channel        (cmd_xbar_demux_004_src0_channel),                //          .channel
		.sink4_data           (cmd_xbar_demux_004_src0_data),                   //          .data
		.sink4_startofpacket  (cmd_xbar_demux_004_src0_startofpacket),          //          .startofpacket
		.sink4_endofpacket    (cmd_xbar_demux_004_src0_endofpacket),            //          .endofpacket
		.sink5_ready          (cmd_xbar_demux_005_src0_ready),                  //     sink5.ready
		.sink5_valid          (cmd_xbar_demux_005_src0_valid),                  //          .valid
		.sink5_channel        (cmd_xbar_demux_005_src0_channel),                //          .channel
		.sink5_data           (cmd_xbar_demux_005_src0_data),                   //          .data
		.sink5_startofpacket  (cmd_xbar_demux_005_src0_startofpacket),          //          .startofpacket
		.sink5_endofpacket    (cmd_xbar_demux_005_src0_endofpacket),            //          .endofpacket
		.sink6_ready          (cmd_xbar_demux_006_src0_ready),                  //     sink6.ready
		.sink6_valid          (cmd_xbar_demux_006_src0_valid),                  //          .valid
		.sink6_channel        (cmd_xbar_demux_006_src0_channel),                //          .channel
		.sink6_data           (cmd_xbar_demux_006_src0_data),                   //          .data
		.sink6_startofpacket  (cmd_xbar_demux_006_src0_startofpacket),          //          .startofpacket
		.sink6_endofpacket    (cmd_xbar_demux_006_src0_endofpacket),            //          .endofpacket
		.sink7_ready          (cmd_xbar_demux_007_src0_ready),                  //     sink7.ready
		.sink7_valid          (cmd_xbar_demux_007_src0_valid),                  //          .valid
		.sink7_channel        (cmd_xbar_demux_007_src0_channel),                //          .channel
		.sink7_data           (cmd_xbar_demux_007_src0_data),                   //          .data
		.sink7_startofpacket  (cmd_xbar_demux_007_src0_startofpacket),          //          .startofpacket
		.sink7_endofpacket    (cmd_xbar_demux_007_src0_endofpacket),            //          .endofpacket
		.sink8_ready          (cmd_xbar_demux_008_src0_ready),                  //     sink8.ready
		.sink8_valid          (cmd_xbar_demux_008_src0_valid),                  //          .valid
		.sink8_channel        (cmd_xbar_demux_008_src0_channel),                //          .channel
		.sink8_data           (cmd_xbar_demux_008_src0_data),                   //          .data
		.sink8_startofpacket  (cmd_xbar_demux_008_src0_startofpacket),          //          .startofpacket
		.sink8_endofpacket    (cmd_xbar_demux_008_src0_endofpacket),            //          .endofpacket
		.sink9_ready          (cmd_xbar_demux_009_src0_ready),                  //     sink9.ready
		.sink9_valid          (cmd_xbar_demux_009_src0_valid),                  //          .valid
		.sink9_channel        (cmd_xbar_demux_009_src0_channel),                //          .channel
		.sink9_data           (cmd_xbar_demux_009_src0_data),                   //          .data
		.sink9_startofpacket  (cmd_xbar_demux_009_src0_startofpacket),          //          .startofpacket
		.sink9_endofpacket    (cmd_xbar_demux_009_src0_endofpacket),            //          .endofpacket
		.sink10_ready         (cmd_xbar_demux_010_src0_ready),                  //    sink10.ready
		.sink10_valid         (cmd_xbar_demux_010_src0_valid),                  //          .valid
		.sink10_channel       (cmd_xbar_demux_010_src0_channel),                //          .channel
		.sink10_data          (cmd_xbar_demux_010_src0_data),                   //          .data
		.sink10_startofpacket (cmd_xbar_demux_010_src0_startofpacket),          //          .startofpacket
		.sink10_endofpacket   (cmd_xbar_demux_010_src0_endofpacket),            //          .endofpacket
		.sink11_ready         (cmd_xbar_demux_011_src0_ready),                  //    sink11.ready
		.sink11_valid         (cmd_xbar_demux_011_src0_valid),                  //          .valid
		.sink11_channel       (cmd_xbar_demux_011_src0_channel),                //          .channel
		.sink11_data          (cmd_xbar_demux_011_src0_data),                   //          .data
		.sink11_startofpacket (cmd_xbar_demux_011_src0_startofpacket),          //          .startofpacket
		.sink11_endofpacket   (cmd_xbar_demux_011_src0_endofpacket)             //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (id_router_src_ready),                            //      sink.ready
		.sink_channel        (id_router_src_channel),                          //          .channel
		.sink_data           (id_router_src_data),                             //          .data
		.sink_startofpacket  (id_router_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket    (id_router_src_endofpacket),                      //          .endofpacket
		.sink_valid          (id_router_src_valid),                            //          .valid
		.src0_ready          (rsp_xbar_demux_src0_ready),                      //      src0.ready
		.src0_valid          (rsp_xbar_demux_src0_valid),                      //          .valid
		.src0_data           (rsp_xbar_demux_src0_data),                       //          .data
		.src0_channel        (rsp_xbar_demux_src0_channel),                    //          .channel
		.src0_startofpacket  (rsp_xbar_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket    (rsp_xbar_demux_src0_endofpacket),                //          .endofpacket
		.src1_ready          (rsp_xbar_demux_src1_ready),                      //      src1.ready
		.src1_valid          (rsp_xbar_demux_src1_valid),                      //          .valid
		.src1_data           (rsp_xbar_demux_src1_data),                       //          .data
		.src1_channel        (rsp_xbar_demux_src1_channel),                    //          .channel
		.src1_startofpacket  (rsp_xbar_demux_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket    (rsp_xbar_demux_src1_endofpacket),                //          .endofpacket
		.src2_ready          (rsp_xbar_demux_src2_ready),                      //      src2.ready
		.src2_valid          (rsp_xbar_demux_src2_valid),                      //          .valid
		.src2_data           (rsp_xbar_demux_src2_data),                       //          .data
		.src2_channel        (rsp_xbar_demux_src2_channel),                    //          .channel
		.src2_startofpacket  (rsp_xbar_demux_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket    (rsp_xbar_demux_src2_endofpacket),                //          .endofpacket
		.src3_ready          (rsp_xbar_demux_src3_ready),                      //      src3.ready
		.src3_valid          (rsp_xbar_demux_src3_valid),                      //          .valid
		.src3_data           (rsp_xbar_demux_src3_data),                       //          .data
		.src3_channel        (rsp_xbar_demux_src3_channel),                    //          .channel
		.src3_startofpacket  (rsp_xbar_demux_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket    (rsp_xbar_demux_src3_endofpacket),                //          .endofpacket
		.src4_ready          (rsp_xbar_demux_src4_ready),                      //      src4.ready
		.src4_valid          (rsp_xbar_demux_src4_valid),                      //          .valid
		.src4_data           (rsp_xbar_demux_src4_data),                       //          .data
		.src4_channel        (rsp_xbar_demux_src4_channel),                    //          .channel
		.src4_startofpacket  (rsp_xbar_demux_src4_startofpacket),              //          .startofpacket
		.src4_endofpacket    (rsp_xbar_demux_src4_endofpacket),                //          .endofpacket
		.src5_ready          (rsp_xbar_demux_src5_ready),                      //      src5.ready
		.src5_valid          (rsp_xbar_demux_src5_valid),                      //          .valid
		.src5_data           (rsp_xbar_demux_src5_data),                       //          .data
		.src5_channel        (rsp_xbar_demux_src5_channel),                    //          .channel
		.src5_startofpacket  (rsp_xbar_demux_src5_startofpacket),              //          .startofpacket
		.src5_endofpacket    (rsp_xbar_demux_src5_endofpacket),                //          .endofpacket
		.src6_ready          (rsp_xbar_demux_src6_ready),                      //      src6.ready
		.src6_valid          (rsp_xbar_demux_src6_valid),                      //          .valid
		.src6_data           (rsp_xbar_demux_src6_data),                       //          .data
		.src6_channel        (rsp_xbar_demux_src6_channel),                    //          .channel
		.src6_startofpacket  (rsp_xbar_demux_src6_startofpacket),              //          .startofpacket
		.src6_endofpacket    (rsp_xbar_demux_src6_endofpacket),                //          .endofpacket
		.src7_ready          (rsp_xbar_demux_src7_ready),                      //      src7.ready
		.src7_valid          (rsp_xbar_demux_src7_valid),                      //          .valid
		.src7_data           (rsp_xbar_demux_src7_data),                       //          .data
		.src7_channel        (rsp_xbar_demux_src7_channel),                    //          .channel
		.src7_startofpacket  (rsp_xbar_demux_src7_startofpacket),              //          .startofpacket
		.src7_endofpacket    (rsp_xbar_demux_src7_endofpacket),                //          .endofpacket
		.src8_ready          (rsp_xbar_demux_src8_ready),                      //      src8.ready
		.src8_valid          (rsp_xbar_demux_src8_valid),                      //          .valid
		.src8_data           (rsp_xbar_demux_src8_data),                       //          .data
		.src8_channel        (rsp_xbar_demux_src8_channel),                    //          .channel
		.src8_startofpacket  (rsp_xbar_demux_src8_startofpacket),              //          .startofpacket
		.src8_endofpacket    (rsp_xbar_demux_src8_endofpacket),                //          .endofpacket
		.src9_ready          (rsp_xbar_demux_src9_ready),                      //      src9.ready
		.src9_valid          (rsp_xbar_demux_src9_valid),                      //          .valid
		.src9_data           (rsp_xbar_demux_src9_data),                       //          .data
		.src9_channel        (rsp_xbar_demux_src9_channel),                    //          .channel
		.src9_startofpacket  (rsp_xbar_demux_src9_startofpacket),              //          .startofpacket
		.src9_endofpacket    (rsp_xbar_demux_src9_endofpacket),                //          .endofpacket
		.src10_ready         (rsp_xbar_demux_src10_ready),                     //     src10.ready
		.src10_valid         (rsp_xbar_demux_src10_valid),                     //          .valid
		.src10_data          (rsp_xbar_demux_src10_data),                      //          .data
		.src10_channel       (rsp_xbar_demux_src10_channel),                   //          .channel
		.src10_startofpacket (rsp_xbar_demux_src10_startofpacket),             //          .startofpacket
		.src10_endofpacket   (rsp_xbar_demux_src10_endofpacket),               //          .endofpacket
		.src11_ready         (rsp_xbar_demux_src11_ready),                     //     src11.ready
		.src11_valid         (rsp_xbar_demux_src11_valid),                     //          .valid
		.src11_data          (rsp_xbar_demux_src11_data),                      //          .data
		.src11_channel       (rsp_xbar_demux_src11_channel),                   //          .channel
		.src11_startofpacket (rsp_xbar_demux_src11_startofpacket),             //          .startofpacket
		.src11_endofpacket   (rsp_xbar_demux_src11_endofpacket)                //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (clock_bridge_1_out_clk_clk),                     //       clk.clk
		.reset               (mm_bridge_10_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                         //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                         //          .valid
		.src_data            (rsp_xbar_mux_src_data),                          //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                       //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                          //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                          //          .valid
		.sink0_channel       (crosser_001_out_channel),                        //          .channel
		.sink0_data          (crosser_001_out_data),                           //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                     //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_001 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket)                 //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_002 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_002_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_002_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_002_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_002_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src2_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src2_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src2_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src2_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src2_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src2_endofpacket)                 //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_003 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_003_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_003_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_003_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_003_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_003_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src3_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src3_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src3_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src3_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src3_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src3_endofpacket)                 //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_004 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_004_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_004_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_004_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_004_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_004_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src4_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src4_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src4_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src4_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src4_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src4_endofpacket)                 //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_005 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_005_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_005_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_005_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_005_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_005_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_005_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src5_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src5_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src5_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src5_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src5_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src5_endofpacket)                 //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_006 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_006_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_006_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_006_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_006_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_006_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src6_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src6_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src6_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src6_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src6_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src6_endofpacket)                 //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_007 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_007_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_007_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_007_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_007_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_007_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_007_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src7_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src7_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src7_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src7_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src7_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src7_endofpacket)                 //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_008 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_008_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_008_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_008_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_008_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_008_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src8_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src8_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src8_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src8_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src8_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src8_endofpacket)                 //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_009 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_009_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_009_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_009_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_009_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_009_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_009_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src9_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src9_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src9_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src9_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src9_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src9_endofpacket)                 //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_010 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_010_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_010_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_010_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_010_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_010_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_010_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src10_ready),                     //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src10_valid),                     //          .valid
		.sink0_channel       (rsp_xbar_demux_src10_channel),                   //          .channel
		.sink0_data          (rsp_xbar_demux_src10_data),                      //          .data
		.sink0_startofpacket (rsp_xbar_demux_src10_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src10_endofpacket)                //          .endofpacket
	);

	fpga_mem_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_011 (
		.clk                 (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       clk.clk
		.reset               (mm_bridge_11_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_011_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_011_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_011_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_011_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_011_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_011_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src11_ready),                     //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src11_valid),                     //          .valid
		.sink0_channel       (rsp_xbar_demux_src11_channel),                   //          .channel
		.sink0_data          (rsp_xbar_demux_src11_data),                      //          .data
		.sink0_startofpacket (rsp_xbar_demux_src11_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src11_endofpacket)                //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (221),
		.BITS_PER_SYMBOL     (221),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clock_bridge_1_out_clk_clk),                     //        in_clk.clk
		.in_reset          (mm_bridge_10_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (mem_if_ddr3_emif_0_afi_half_clk_clk),            //       out_clk.clk
		.out_reset         (mm_bridge_11_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_xbar_demux_src0_ready),                      //            in.ready
		.in_valid          (cmd_xbar_demux_src0_valid),                      //              .valid
		.in_startofpacket  (cmd_xbar_demux_src0_startofpacket),              //              .startofpacket
		.in_endofpacket    (cmd_xbar_demux_src0_endofpacket),                //              .endofpacket
		.in_channel        (cmd_xbar_demux_src0_channel),                    //              .channel
		.in_data           (cmd_xbar_demux_src0_data),                       //              .data
		.out_ready         (crosser_out_ready),                              //           out.ready
		.out_valid         (crosser_out_valid),                              //              .valid
		.out_startofpacket (crosser_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_out_channel),                            //              .channel
		.out_data          (crosser_out_data),                               //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (221),
		.BITS_PER_SYMBOL     (221),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (mem_if_ddr3_emif_0_afi_half_clk_clk),            //        in_clk.clk
		.in_reset          (mm_bridge_11_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_1_out_clk_clk),                     //       out_clk.clk
		.out_reset         (mm_bridge_10_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_xbar_demux_src0_ready),                      //            in.ready
		.in_valid          (rsp_xbar_demux_src0_valid),                      //              .valid
		.in_startofpacket  (rsp_xbar_demux_src0_startofpacket),              //              .startofpacket
		.in_endofpacket    (rsp_xbar_demux_src0_endofpacket),                //              .endofpacket
		.in_channel        (rsp_xbar_demux_src0_channel),                    //              .channel
		.in_data           (rsp_xbar_demux_src0_data),                       //              .data
		.out_ready         (crosser_001_out_ready),                          //           out.ready
		.out_valid         (crosser_001_out_valid),                          //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_001_out_channel),                        //              .channel
		.out_data          (crosser_001_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

endmodule
